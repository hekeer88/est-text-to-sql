SELECT COUNT(DISTINCT Singer_ID) FROM singer	concert_singer
SELECT COUNT(DISTINCT Singer_ID) FROM singer	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'Prantsusmaa'	concert_singer
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'Prantsusmaa'	concert_singer
SELECT Song_Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1;	concert_singer
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT Country, COUNT(DISTINCT Singer_ID) AS Singer_Count FROM singer GROUP BY Country	concert_singer
SELECT Country, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Country;	concert_singer
SELECT "Song_Name" FROM singer WHERE "Age" > (SELECT AVG("Age") FROM singer)	concert_singer
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity), AVG(Capacity) FROM stadium	concert_singer
SELECT Average, MAX(Capacity) FROM stadium	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)	concert_singer
SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'	concert_singer
SELECT s1.Name, COUNT(c1.concert_ID) FROM stadium AS s1 LEFT JOIN concert AS c1 ON s1.Stadium_ID = c1.Stadium_ID GROUP BY s1.Name	concert_singer
SELECT Stadium_ID, COUNT(concert_ID) FROM concert GROUP BY Stadium_ID	concert_singer
SELECT t1.Name, t1.Capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year >= '2014' GROUP BY t1.Stadium_ID ORDER BY COUNT(t2.concert_ID) DESC LIMIT 1;	concert_singer
SELECT Name, Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE Year >= 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert_ID) DESC LIMIT 1	concert_singer
SELECT Year, count(concert_ID) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1	concert_singer
SELECT DISTINCT s."Name" FROM "stadium" s LEFT JOIN "concert" c ON s."Stadium_ID" = c."Stadium_ID" WHERE c."concert_ID" IS NULL	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')	concert_singer
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Singer_Count FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID	concert_singer
SELECT concert_Name, Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID;	concert_singer
SELECT s.Name, COUNT(DISTINCT sic.concert_ID) AS number_of_concerts FROM singer AS s LEFT JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	concert_singer
SELECT s.Name, COUNT(sic.concert_ID) AS concert_count FROM singer AS s LEFT JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	concert_singer
SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014	concert_singer
SELECT s.name FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID JOIN concert AS c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014'	concert_singer
SELECT Name, Country FROM singer WHERE Song_Name LIKE "%Hey%"	concert_singer
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'	concert_singer
SELECT DISTINCT s.Name, s.Location FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT DISTINCT s.Name, s.Location FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015'	concert_singer
SELECT stadium.Name, stadium.Location FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN ('2014', '2015')	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	concert_singer
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT weight FROM Pets WHERE PetType = 'koer' ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT weight FROM Pets WHERE PetType = "koer" ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType	pets_1
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType	pets_1
SELECT COUNT(*) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID WHERE S.Age > 20	pets_1
SELECT COUNT(DISTINCT PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Age >= 20	pets_1
SELECT COUNT(*) FROM Has_Pet AS hp JOIN Pets AS p ON hp.PetID = p.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.Sex = 'F' AND p.PetType = 'Koer';	pets_1
SELECT COUNT(*) FROM Has_Pet AS t1 JOIN Student AS t2 ON t1.StuID = t2.StuID JOIN Pets AS t3 ON t1.PetID = t3.PetID WHERE t2.Sex = 'F' AND t3.PetType = 'koer'	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets;	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'kass' OR p.PetType = 'koer';	pets_1
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = "kass" OR P.PetType = "koer"	pets_1
SELECT DISTINCT s.Fname FROM Student AS s JOIN Has_Pet AS hp1 ON s.StuID = hp1.StuID JOIN Pets AS p1 ON hp1.PetID = p1.PetID JOIN Has_Pet AS hp2 ON s.StuID = hp2.StuID JOIN Pets AS p2 ON hp2.PetID = p2.PetID WHERE p1.PetType = 'kass' AND p2.PetType = 'koer';	pets_1
SELECT DISTINCT s.Fname FROM Student AS s JOIN Has_Pet AS hp1 ON s.StuID = hp1.StuID JOIN Pets AS p1 ON hp1.PetID = p1.PetID JOIN Has_Pet AS hp2 ON s.StuID = hp2.StuID JOIN Pets AS p2 ON hp2.PetID = p2.PetID WHERE p1.PetType = 'kass' AND p2.PetType = 'koer';	pets_1
SELECT DISTINCT s.Major, s.Age FROM Student AS s LEFT JOIN Has_Pet AS hp ON s.StuID = hp.StuID LEFT JOIN Pets AS p ON hp.PetID = p.PetID WHERE p.PetType IS NULL OR p.PetType != 'kass';	pets_1
SELECT DISTINCT s.Major, s.Age FROM Student AS s LEFT JOIN Has_Pet AS h ON s.StuID = h.StuID LEFT JOIN Pets AS p ON h.PetID = p.PetID WHERE p.PetType IS NULL OR p.PetType != 'kass'	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'kass')	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'kass');	pets_1
SELECT DISTINCT s.Fname, s.Age FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID JOIN Pets AS p ON hp.PetID = p.PetID WHERE p.PetType = 'koer' AND s.StuID NOT IN ( SELECT s2.StuID FROM Student AS s2 JOIN Has_Pet AS hp2 ON s2.StuID = hp2.StuID JOIN Pets AS p2 ON hp2.PetID = p2.PetID WHERE p2.PetType = 'kass' )	pets_1
SELECT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'koer' AND S.StuID NOT IN (SELECT HP2.StuID FROM Has_Pet AS HP2 JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'kass')	pets_1
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(pet_age) AS AvgAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType	pets_1
SELECT DISTINCT s.Fname, s.Age FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID	pets_1
SELECT DISTINCT s.Fname, s.Age FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID	pets_1
SELECT T2.PetID FROM Has_Pet AS T2 JOIN Student AS T1 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'	pets_1
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'	pets_1
SELECT S.StuID, COUNT(P.PetID) AS PetCount FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID GROUP BY S.StuID	pets_1
SELECT T1.StuID, COUNT(T1.PetID) FROM Has_Pet AS T1 GROUP BY T1.StuID	pets_1
SELECT DISTINCT s.FName, s.Sex FROM Student AS s JOIN Has_Pet AS hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 1	pets_1
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)	pets_1
SELECT LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'kass' AND P.pet_age = 3	pets_1
SELECT LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'kass' AND T3.pet_age = 3	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT COUNT(*) FROM continents	car_1
SELECT COUNT(*) FROM continents	car_1
SELECT c.ContId, c.Continent, COUNT(ct.CountryId) FROM continents c JOIN countries ct ON c.ContId = ct.Continent GROUP BY c.ContId, c.Continent	car_1
SELECT cont."ContId", cont."Continent", COUNT(cou."CountryId") FROM continents AS cont JOIN countries AS cou ON cont."ContId" = cou."Continent" GROUP BY cont."ContId", cont."Continent"	car_1
SELECT COUNT(*) FROM countries	car_1
SELECT COUNT(*) FROM countries	car_1
SELECT t3.FullName, t1.Maker, COUNT(t1.Model) FROM model_list AS t1 JOIN car_makers AS t3 ON t1.Maker = t3.Id GROUP BY t1.Maker, t3.FullName	car_1
SELECT t1.FullName, t1.Id, COUNT(t2.Model) FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id	car_1
SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY CAST(Horsepower AS INTEGER) ASC LIMIT 1)	car_1
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY CAST(Horsepower AS INTEGER) ASC LIMIT 1	car_1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)	car_1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);	car_1
SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970	car_1
SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;	car_1
SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);	car_1
SELECT cm.Maker, MIN(cd.Year) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id GROUP BY cm.Maker ORDER BY MIN(cd.Year) ASC LIMIT 1	car_1
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980	car_1
SELECT DISTINCT Model FROM cars_data AS c JOIN car_names AS cn ON c.Id = cn.MakeId WHERE c.Year > 1980	car_1
SELECT c.Continent, COUNT(cm.Id) FROM continents AS c JOIN countries AS co ON c.ContId = co.Continent JOIN car_makers AS cm ON co.CountryId = cm.Country GROUP BY c.Continent	car_1
SELECT t1.Continent, COUNT(DISTINCT t3.Id) AS NumberOfCarMakers FROM continents AS t1 JOIN countries AS t2 ON t1.ContId = t2.Continent JOIN car_makers AS t3 ON t2.CountryId = t3.Country GROUP BY t1.Continent	car_1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;	car_1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;	car_1
SELECT COUNT(m.Model) AS NumberOfModels, c.FullName FROM model_list AS m JOIN car_makers AS c ON m.Maker = c.Id GROUP BY c.FullName	car_1
SELECT t1.Id, t1.FullName, COUNT(t2.ModelId) AS ModelCount FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id, t1.FullName	car_1
SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'Hornet Sportabout (SW)' AND Make = 'AMC');	car_1
SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = "AMC Hornet Sportabout (sw)")	car_1
SELECT COUNT(*) FROM car_makers AS cm JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'Prantsusmaa';	car_1
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'Prantsusmaa')	car_1
SELECT COUNT(DISTINCT model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA'	car_1
SELECT COUNT(DISTINCT model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = "Ameerika Ühendriigid"	car_1
SELECT AVG(CAST(MPG AS FLOAT)) FROM cars_data WHERE Cylinders = 4	car_1
SELECT AVG(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 4	car_1
SELECT Weight FROM cars_data WHERE Year = 1974 AND Cylinders = 8 ORDER BY Weight ASC LIMIT 1	car_1
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;	car_1
SELECT DISTINCT c.Maker, m.Model FROM car_makers AS c JOIN model_list AS m ON c.Id = m.Maker	car_1
SELECT DISTINCT c.Maker, m.Model FROM car_makers AS c JOIN model_list AS m ON c.Id = m.Maker	car_1
SELECT DISTINCT t2.CountryName, t2.CountryId FROM countries AS t2 JOIN car_makers AS t1 ON t1.Country = t2.CountryId	car_1
SELECT DISTINCT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country	car_1
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150	car_1
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150	car_1
SELECT Year, AVG(Weight) AS AvgWeight FROM cars_data GROUP BY Year	car_1
SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year	car_1
SELECT CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) >= 3	car_1
SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Euroopa') AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3)	car_1
SELECT MAX(CAST(Horsepower AS INTEGER)), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders = 3	car_1
SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3 GROUP BY Make	car_1
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model ORDER BY CAST(T1.MPG AS INTEGER) DESC LIMIT 1	car_1
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY AVG(CAST(MPG AS REAL)) DESC LIMIT 1	car_1
SELECT AVG(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'Volvo')	car_1
SELECT AVG(Edispl) FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Make = "Volvo"	car_1
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;	car_1
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders	car_1
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY count(DISTINCT Make) DESC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = "American Motor Company"	car_1
SELECT COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "American Motor Company"	car_1
SELECT m.FullName, m.Id FROM car_makers AS m JOIN model_list AS l ON l.Maker = m.Id GROUP BY m.FullName, m.Id HAVING COUNT(l.ModelId) > 3	car_1
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3	car_1
SELECT DISTINCT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T1.Maker = T3.Id JOIN cars_data AS T4 ON T2.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.Weight > 3500	car_1
SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'General Motors' OR T4.Weight > 3500	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Weight > 3000	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'Volvo') ORDER BY Accelerate DESC LIMIT 1)	car_1
SELECT c.Cylinders FROM cars_data AS c JOIN car_names AS cn ON c.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo' ORDER BY c.Accelerate DESC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data))	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY CAST(Horsepower AS INTEGER) DESC LIMIT 1)	car_1
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2	car_1
SELECT COUNT(*) FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders = 6	car_1
SELECT T1.MakeId FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY CAST(T2.Horsepower AS INTEGER) DESC LIMIT 1	car_1
SELECT Model FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE Cylinders = 4 ORDER BY CAST(cd.Horsepower AS INTEGER) DESC LIMIT 1	car_1
SELECT car_names.Make, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > ( SELECT MIN(Horsepower) FROM cars_data ) AND cars_data.Cylinders <= 3	car_1
SELECT T2.Id, T2.Maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T2.Id = T1.Id WHERE T1.Horsepower IS NOT NULL AND T1.Cylinders < 4	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName != 'Ford Motor Company'	car_1
SELECT DISTINCT Model FROM car_names AS CN JOIN cars_data AS CD ON CN.MakeId = CD.Id WHERE CD.Weight < 3500 AND Make <> "Ford Motor Company"	car_1
SELECT DISTINCT c.CountryName FROM countries AS c LEFT JOIN car_makers AS m ON c.CountryId = m.Country WHERE m.Country IS NULL	car_1
SELECT DISTINCT c.CountryName FROM countries AS c LEFT JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL	car_1
SELECT t1.Id, t1.Maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id HAVING COUNT(t2.Model) >= 2 AND COUNT(DISTINCT t1.Id) > 3	car_1
SELECT car_makers.Id, car_makers.Maker FROM car_makers WHERE car_makers.Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(ModelId) >= 2) AND car_makers.Id IN (SELECT car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Make HAVING COUNT(cars_data.Id) > 3)	car_1
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'fiat' OR countries.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3)	car_1
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN ( SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(car_makers.Id) > 3 ) OR countries.CountryId IN ( SELECT car_makers.Country FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = "Fiat" )	car_1
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Country FROM airlines WHERE Airline = "Jetblue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = "Anthony"	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT COUNT(DISTINCT Airline) FROM airlines	flight_2
SELECT COUNT(*) FROM airlines	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM flights;	flight_2
SELECT count(*) FROM flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT count(*) FROM airlines WHERE Country = "USA";	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = 'United States'	flight_2
SELECT City, Country FROM airports WHERE AirportName = 'Altoni lennujaam'	flight_2
SELECT AirportName FROM airports WHERE City = "Alton" AND Country = "Ameerika Ühendriikides"	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE City = "Aberdeen"	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen';	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	flight_2
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = "Aberdeen"	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';	flight_2
SELECT COUNT(*) FROM flights AS F JOIN airports AS A1 ON F.SourceAirport = A1.AirportCode JOIN airports AS A2 ON F.DestAirport = A2.AirportCode WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'	flight_2
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashleysse'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')	flight_2
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways'	flight_2
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';	flight_2
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = "United Airlines" AND f.DestAirport = "ASY"	flight_2
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'	flight_2
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE f.SourceAirport = "AHD" AND a.Airline = "United Airlines"	flight_2
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode JOIN airlines AS al ON f.Airline = al.uid WHERE a.City = 'Aberdeen' AND al.Airline = 'United Airlines';	flight_2
SELECT DestAirport, COUNT(*) AS ArrivalCount FROM flights GROUP BY DestAirport ORDER BY ArrivalCount DESC LIMIT 1	flight_2
SELECT City FROM airports WHERE AirportCode = (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)	flight_2
SELECT City, COUNT(*) as DepartureCount FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY DepartureCount DESC LIMIT 1	flight_2
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1	flight_2
SELECT Airline, COUNT(*) as NumberOfFlights FROM flights GROUP BY Airline ORDER BY NumberOfFlights DESC LIMIT 1	flight_2
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1	flight_2
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)	flight_2
SELECT Airline, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)	flight_2
SELECT Airline FROM airlines WHERE uid IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD')	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'AHD'	flight_2
SELECT Airline FROM flights WHERE DestAirport = 'AHD'	flight_2
SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'	flight_2
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport = 'CVO'	flight_2
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200	flight_2
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = "United Airlines"	flight_2
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = "APG"	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = "APG"	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'	flight_2
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = "Aberdeen")	flight_2
SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"	flight_2
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))	flight_2
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')	flight_2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)	flight_2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)	flight_2
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC;	employee_hire_evaluation
SELECT City, COUNT(DISTINCT Employee_ID) AS Number_of_Employees FROM employee GROUP BY City	employee_hire_evaluation
SELECT City, COUNT(DISTINCT Employee_ID) AS Num_Employees FROM employee GROUP BY City	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1	employee_hire_evaluation
SELECT COUNT(*) AS Number_of_Shops, Location FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location	employee_hire_evaluation
SELECT t2.Manager_name, t2.District FROM shop AS t2 WHERE t2.Number_products = (SELECT MAX(Number_products) FROM shop)	employee_hire_evaluation
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop;	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(ev.Bonus) DESC LIMIT 1	employee_hire_evaluation
SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Employee_ID ORDER BY COUNT(t2.Year_awarded) DESC LIMIT 1;	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)	employee_hire_evaluation
SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)	employee_hire_evaluation
SELECT t1.Name FROM shop AS t1 JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Name ORDER BY COUNT(t2.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT t2.Name FROM shop AS t2 JOIN hiring AS t1 ON t2.Shop_ID = t1.Shop_ID GROUP BY t2.Shop_ID ORDER BY COUNT(t1.Employee_ID) DESC LIMIT 1;	employee_hire_evaluation
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)	employee_hire_evaluation
SELECT t2.Name FROM shop AS t2 LEFT JOIN hiring AS t1 ON t2.Shop_ID = t1.Shop_ID WHERE t1.Employee_ID IS NULL	employee_hire_evaluation
SELECT t2.Name, COUNT(t1.Employee_ID) FROM hiring AS t1 JOIN shop AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t2.Name	employee_hire_evaluation
SELECT s.Name, COUNT(h.Employee_ID) FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT DISTINCT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000)	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT DISTINCT COUNT(Location) FROM shop;	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents;	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents;	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents;	cre_Doc_Template_Mgt
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV"	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) FROM Templates;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents AS d JOIN Templates AS t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID, Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates;	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT t1.Template_Type_Code, COUNT(t2.Template_ID) FROM Ref_Template_Types AS t1 LEFT JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code GROUP BY t1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT t1.Template_Type_Code, COUNT(t2.Template_ID) FROM Ref_Template_Types AS t1 LEFT JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code GROUP BY t1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3)	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3	cre_Doc_Template_Mgt
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')	cre_Doc_Template_Mgt
SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code, COUNT(d.Document_ID) FROM Ref_Template_Types AS t LEFT JOIN Templates AS temp ON t.Template_Type_Code = temp.Template_Type_Code LEFT JOIN Documents AS d ON temp.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code	cre_Doc_Template_Mgt
SELECT t1.Template_Type_Code, COUNT(t3.Document_ID) FROM Ref_Template_Types AS t1 LEFT JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code LEFT JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID GROUP BY t1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Raamat';	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Raamat"	cre_Doc_Template_Mgt
SELECT DISTINCT R.Template_Type_Description FROM Ref_Template_Types AS R JOIN Templates AS T ON R.Template_Type_Code = T.Template_Type_Code JOIN Documents AS D ON T.Template_ID = D.Template_ID	cre_Doc_Template_Mgt
SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types AS rtt JOIN Templates AS t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents AS d ON t.Template_ID = d.Template_ID	cre_Doc_Template_Mgt
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Esitlus"	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Details = 'Esitlus'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'	cre_Doc_Template_Mgt
SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'	cre_Doc_Template_Mgt
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT p.Paragraph_Text FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = "Klientide arvustused";	cre_Doc_Template_Mgt
SELECT Paragraph_Text FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Klientide arvustused'	cre_Doc_Template_Mgt
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;	cre_Doc_Template_Mgt
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;	cre_Doc_Template_Mgt
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name	cre_Doc_Template_Mgt
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS paragraph_count FROM Documents d LEFT JOIN Paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name	cre_Doc_Template_Mgt
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT t1.Document_ID, t1.Document_Name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID GROUP BY t1.Document_ID, t1.Document_Name ORDER BY COUNT(t2.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2)	cre_Doc_Template_Mgt
SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2)	cre_Doc_Template_Mgt
SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brasiilia%' AND Paragraph_Text LIKE '%Iirimaa%'	cre_Doc_Template_Mgt
SELECT DISTINCT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Brasiilia%' AND Paragraphs.Paragraph_Text LIKE '%Iirimaa%';	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;	course_teach
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Name, Age, Hometown FROM teacher	course_teach
SELECT Name, Age, Hometown FROM teacher	course_teach
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban District"	course_teach
SELECT Name FROM teacher WHERE Hometown <> "Little Lever Urban District"	course_teach
SELECT Name FROM teacher WHERE Age IN ('32', '33')	course_teach
SELECT Name FROM teacher WHERE Age = "32" OR Age = "33"	course_teach
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1	course_teach
SELECT Hometown FROM teacher ORDER BY CAST(Age AS INTEGER) ASC LIMIT 1	course_teach
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown, COUNT(*) as Commonness FROM teacher GROUP BY Hometown ORDER BY Commonness DESC	course_teach
SELECT Hometown, COUNT(*) AS frequency FROM teacher GROUP BY Hometown ORDER BY frequency DESC	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2	course_teach
SELECT t2.Name, t1.Course FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID	course_teach
SELECT t2.Name, t1.Course FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID	course_teach
SELECT T2.Name, T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name ASC	course_teach
SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID ORDER BY t.Name	course_teach
SELECT t2.Name FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID WHERE t1.Course = 'Matemaatika'	course_teach
SELECT DISTINCT t2.Name FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID WHERE t1.Course = 'matemaatika'	course_teach
SELECT t.Name, COUNT(DISTINCT ca.Course_ID) FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	course_teach
SELECT t.Name, COUNT(ca.Course_ID) FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	course_teach
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)	course_teach
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)	course_teach
SELECT COUNT(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4	museum_visit
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC	museum_visit
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;	museum_visit
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'	museum_visit
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Muuseum'	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')	museum_visit
SELECT v.ID, v.Name, v.Age FROM visit AS vi JOIN visitor AS v ON vi.visitor_ID = v.ID GROUP BY vi.visitor_ID HAVING COUNT(vi.Museum_ID) > 1	museum_visit
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1	museum_visit
SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY SUM(Num_of_Ticket) DESC LIMIT 1)	museum_visit
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)	museum_visit
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit	museum_visit
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1	museum_visit
SELECT Name FROM visitor WHERE ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year < '2009') AND ID IN (SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > '2011')	museum_visit
SELECT COUNT(*) FROM visitor AS v WHERE NOT EXISTS ( SELECT 1 FROM visit AS vi JOIN museum AS m ON vi.Museum_ID = m.Museum_ID WHERE vi.visitor_ID = v.ID AND m.Open_Year > '2010' )	museum_visit
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'	museum_visit
SELECT COUNT(*) FROM players	wta_1
SELECT COUNT(*) FROM players	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT COUNT(*) FROM matches;	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches	wta_1
SELECT winner_name, loser_name, AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches GROUP BY winner_name, loser_name	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT MAX(loser_rank) FROM matches	wta_1
SELECT MAX(loser_rank) FROM matches	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10	wta_1
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN ( SELECT winner_name FROM matches WHERE year = 2016 )	wta_1
SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016	wta_1
SELECT * FROM matches WHERE year IN (2013, 2016)	wta_1
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;	wta_1
SELECT DISTINCT P.country_code, P.first_name FROM players AS P JOIN matches AS M1 ON P.player_id = M1.winner_id JOIN matches AS M2 ON P.player_id = M2.winner_id WHERE M1.tourney_name = 'WTA Championships' AND M2.tourney_name = 'Australian Open'	wta_1
SELECT DISTINCT P.first_name, P.country_code FROM players AS P JOIN matches AS M1 ON P.player_id = M1.winner_id JOIN matches AS M2 ON P.player_id = M2.winner_id WHERE M1.tourney_name = 'WTA Finals' AND M2.tourney_name = 'Australian Open'	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'Left' ORDER BY birth_date	wta_1
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date	wta_1
SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1	wta_1
SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1	wta_1
SELECT winner_name, SUM(winner_rank_points) AS total_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT winner_name, SUM(winner_rank_points) AS total_ranking_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = 'Austraalia lahtised' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)	wta_1
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1	wta_1
SELECT AVG(r.ranking), p.first_name FROM rankings AS r JOIN players AS p ON r.player_id = p.player_id GROUP BY p.player_id	wta_1
SELECT P.first_name, AVG(R.ranking) FROM players P JOIN rankings R ON P.player_id = R.player_id GROUP BY P.first_name	wta_1
SELECT SUM(r.ranking_points), p.first_name FROM players AS p JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name	wta_1
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players AS p JOIN rankings AS r ON p.player_id = r.player_id GROUP BY p.first_name	wta_1
SELECT COUNT(player_id), country_code FROM players GROUP BY country_code	wta_1
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;	wta_1
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date	wta_1
SELECT year, COUNT(*) FROM matches GROUP BY year	wta_1
SELECT year, COUNT(*) FROM matches GROUP BY year;	wta_1
SELECT winner_name, winner_ioc FROM matches ORDER BY winner_age ASC LIMIT 3	wta_1
SELECT winner_name, winner_ioc FROM matches ORDER BY winner_age ASC LIMIT 3	wta_1
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA meistrivõistlused' AND winner_hand = 'L'	wta_1
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'	wta_1
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1)	wta_1
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY SUM(winner_rank_points) DESC LIMIT 1)	wta_1
SELECT hand, COUNT(*) FROM players GROUP BY hand	wta_1
SELECT hand, COUNT(*) FROM players GROUP BY hand	wta_1
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Kinni püütud'	battle_death
SELECT name, tonnage FROM ship ORDER BY name DESC	battle_death
SELECT name, date, result FROM battle	battle_death
SELECT max(killed), min(killed) FROM death	battle_death
SELECT AVG(injured) FROM death	battle_death
SELECT de.killed, de.injured FROM ship AS sh JOIN death AS de ON sh.id = de.caused_by_ship_id WHERE sh.tonnage = 't'	battle_death
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'	battle_death
SELECT DISTINCT B.id, B.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle WHERE S.ship_type = 'Brig'	battle_death
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id WHERE death.killed > 10	battle_death
SELECT caused_by_ship_id, name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY caused_by_ship_id, name ORDER BY SUM(injured) DESC LIMIT 1	battle_death
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'	battle_death
SELECT COUNT(DISTINCT result) FROM battle	battle_death
SELECT COUNT(*) FROM battle AS b WHERE NOT EXISTS (SELECT 1 FROM ship AS s WHERE s.lost_in_battle = b.id AND s.tonnage = '225')	battle_death
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')	battle_death
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')	battle_death
SELECT note FROM death WHERE note LIKE '%East%'	battle_death
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT COUNT(*) FROM Courses;	student_transcripts_tracking
SELECT COUNT(course_id) FROM Courses	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'Matemaatika'	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name LIKE '%matemaatika%'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea"	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea";	student_transcripts_tracking
SELECT T2.department_name, T2.department_id FROM Departments AS T2 JOIN Degree_Programs AS T1 ON T2.department_id = T1.department_id GROUP BY T2.department_id, T2.department_name ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT department_name, department_id FROM Departments ORDER BY (SELECT COUNT(*) FROM Degree_Programs WHERE Degree_Programs.department_id = Departments.department_id) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'tehnikaosakond')	student_transcripts_tracking
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = "inseneriteaduskond")	student_transcripts_tracking
SELECT section_name, section_description FROM Sections	student_transcripts_tracking
SELECT section_name, section_description FROM Sections	student_transcripts_tracking
SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2);	student_transcripts_tracking
SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) < 2)	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)	student_transcripts_tracking
SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%arvuti%'	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%arvuti%'	student_transcripts_tracking
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN ( SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 )	student_transcripts_tracking
SELECT student_id, first_name, middle_name, last_name FROM Students WHERE student_id IN ( SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) >= 2 )	student_transcripts_tracking
SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE '%Bakalaureuse%'	student_transcripts_tracking
SELECT DISTINCT s.first_name, s.middle_name, s.last_name FROM Students AS s JOIN Student_Enrolment AS se ON s.student_id = se.student_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%bakalaureuseõppe%'	student_transcripts_tracking
SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T3 ON T1.degree_program_id = T3.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)	student_transcripts_tracking
SELECT degree_program_id, degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT student_id, first_name, middle_name, last_name, COUNT(degree_program_id) AS enrollments_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments_count DESC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) as enrolment_count FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrolment_count DESC LIMIT 1	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT DISTINCT c.course_name FROM Courses AS c JOIN Student_Enrolment_Courses AS sec ON c.course_id = sec.course_id	student_transcripts_tracking
SELECT DISTINCT C.course_name FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT s.last_name FROM Students AS s JOIN Addresses AS a ON s.current_address_id = a.address_id WHERE a.state_province_county = "Põhja-Carolina" AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT DISTINCT s.last_name FROM Students AS s JOIN Addresses AS a ON s.current_address_id = a.address_id WHERE a.state_province_county = "Põhja-Carolina" AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2)	student_transcripts_tracking
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2)	student_transcripts_tracking
SELECT t1.cell_mobile_number FROM Students AS t1 WHERE t1.first_name = "Timmothy" AND t1.last_name = "Ward"	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1	student_transcripts_tracking
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id	student_transcripts_tracking
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id	student_transcripts_tracking
SELECT T1.* FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(student_id) DESC LIMIT 1)	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT student_course_id, count(*) FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT count(*) AS max_count, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY max_count DESC LIMIT 1	student_transcripts_tracking
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(student_course_id) ASC LIMIT 1)	student_transcripts_tracking
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)	student_transcripts_tracking
SELECT DISTINCT s.semester_name FROM Student_Enrolment AS se JOIN Semesters AS s ON se.semester_id = s.semester_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('bachelor', 'master') GROUP BY s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2	student_transcripts_tracking
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Master', 'Bachelor')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2	student_transcripts_tracking
SELECT COUNT(DISTINCT current_address_id) FROM Students	student_transcripts_tracking
SELECT DISTINCT a.* FROM Addresses AS a JOIN Students AS s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id	student_transcripts_tracking
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY last_name DESC	student_transcripts_tracking
SELECT * FROM Sections WHERE section_name = 'h';	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT DISTINCT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT DISTINCT S.first_name FROM Students AS S JOIN Addresses AS A ON S.permanent_address_id = A.address_id WHERE A.country = "Haiti" OR S.cell_mobile_number = "09700166582"	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"	tvshow
SELECT Title FROM Cartoon WHERE Directed_by IN ("Ben Jones", "Brandon Vietti")	tvshow
SELECT Country, COUNT(id) AS Telekanalite_Arv FROM TV_Channel GROUP BY Country ORDER BY Telekanalite_Arv DESC LIMIT 1	tvshow
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1	tvshow
SELECT DISTINCT series_name, Content FROM TV_Channel;	tvshow
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.series_name = "Sky Radio"	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT COUNT(*) FROM TV_Channel WHERE Language = "inglise"	tvshow
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = "English"	tvshow
SELECT Language, COUNT(id) AS channel_count FROM TV_Channel GROUP BY Language ORDER BY channel_count ASC LIMIT 1	tvshow
SELECT Language, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Language ORDER BY ChannelCount ASC LIMIT 1	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"	tvshow
SELECT series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle"	tvshow
SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode FROM TV_series ORDER BY Rating DESC	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT MIN(Episode), MAX(Episode) FROM TV_series	tvshow
SELECT MAX(Share), MIN(Share) FROM TV_series	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = "Igavene armastus"	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = "A Love of a Lifetime"	tvshow
SELECT series_name FROM TV_Channel AS t1 JOIN TV_series AS t2 ON t1.id = t2.Channel WHERE t2.Episode = "Elu armastus"	tvshow
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'	tvshow
SELECT Episode FROM TV_series WHERE Channel = "Sky Radio"	tvshow
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT "Production_code", "Channel" FROM "Cartoon" ORDER BY "Original_air_date" DESC LIMIT 1	tvshow
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'	tvshow
SELECT DISTINCT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'	tvshow
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT DISTINCT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey';	tvshow
SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')	tvshow
SELECT DISTINCT Country FROM TV_Channel AS t1 WHERE t1.id NOT IN (SELECT t2.Channel FROM Cartoon AS t2 WHERE t2.Written_by = "Todd Casey")	tvshow
SELECT DISTINCT T2.series_name, T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by IN ('Ben Jones', 'Michael Chang')	tvshow
SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang'))	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != "English"	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != "English"	tvshow
SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2	tvshow
SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.id HAVING COUNT(T2.id) > 2	tvshow
SELECT DISTINCT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')	tvshow
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')	tvshow
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')	tvshow
SELECT DISTINCT "Package_Option" FROM "TV_Channel" WHERE "id" NOT IN (SELECT DISTINCT "Channel" FROM "Cartoon" WHERE "Directed_by" = "Ben Jones")	tvshow
SELECT COUNT(*) FROM poker_player	poker_player
SELECT COUNT(*) FROM poker_player;	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;	poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player;	poker_player
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player";	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT t1.Money_Rank FROM poker_player AS t1 WHERE t1.Earnings = (SELECT MAX(t2.Earnings) FROM poker_player AS t2)	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT MAX("Final_Table_Made") FROM "poker_player" WHERE "Earnings" < 200000	poker_player
SELECT DISTINCT p.Name FROM people AS p JOIN poker_player AS pp ON p.People_ID = pp.People_ID	poker_player
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID	poker_player
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC	poker_player
SELECT P.Name FROM poker_player AS Pp JOIN people AS P ON Pp.People_ID = P.People_ID ORDER BY Pp.Final_Table_Made ASC	poker_player
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1	poker_player
SELECT Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings ASC LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)	poker_player
SELECT AVG(Earnings) FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height > 200	poker_player
SELECT AVG(Earnings) FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height > 200	poker_player
SELECT P.Name FROM poker_player AS P1 JOIN people AS P ON P1.People_ID = P.People_ID ORDER BY P1.Earnings DESC	poker_player
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1;	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name FROM people WHERE Nationality != "Venemaa"	poker_player
SELECT Name FROM people WHERE Nationality <> 'Venemaa'	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people;	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people;	poker_player
SELECT DISTINCT COUNT(state) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT vote_id, phone_number, state FROM VOTES	voter_1
SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE;	voter_1
SELECT MAX(created) FROM VOTES WHERE state = 'CA'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'	voter_1
SELECT DISTINCT state, created FROM VOTES	voter_1
SELECT t2.contestant_number, t2.contestant_name FROM CONTESTANTS AS t2 JOIN VOTES AS t1 ON t1.contestant_number = t2.contestant_number GROUP BY t2.contestant_number, t2.contestant_name HAVING COUNT(t1.vote_id) >= 2	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(vote_id) ASC LIMIT 1);	voter_1
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'	voter_1
SELECT contestant_number FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES)	voter_1
SELECT `state` FROM VOTES GROUP BY `state` ORDER BY COUNT(*) DESC LIMIT 1;	voter_1
SELECT V.created, V.state, V.phone_number FROM VOTES AS V JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'	voter_1
SELECT DISTINCT area_code FROM VOTES AS V1 JOIN VOTES AS V2 ON V1.phone_number = V2.phone_number JOIN CONTESTANTS AS C1 ON V1.contestant_number = C1.contestant_number JOIN CONTESTANTS AS C2 ON V2.contestant_number = C2.contestant_number JOIN AREA_CODE_STATE AS ACS ON V1.state = ACS.state WHERE C1.contestant_name = 'Tabatha Gehling' AND C2.contestant_name = 'Kelly Clauss'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'	voter_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic';	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = "Caribbean"	world_1
SELECT Continent FROM country WHERE Name = "Anguilla"	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T'	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brasiilia"	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brasiilia'	world_1
SELECT Region, Population FROM country WHERE Name = 'Angola'	world_1
SELECT Region, Population FROM country WHERE Name = "Angola"	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Kesk-Aafrika'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1	world_1
SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')	world_1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'	world_1
SELECT SUM(city.Population), MAX(country.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = "Africa" AND GovernmentForm LIKE "%republic%"	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'	world_1
SELECT SUM(Population) FROM city WHERE District = "Gelderland"	world_1
SELECT sum(Population) FROM city WHERE District = 'Gelderland'	world_1
SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region LIKE '%USA%'	world_1
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'Territory of USA'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')	world_1
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = "AFG" AND IsOfficial = "T"	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'	world_1
SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(Language) DESC LIMIT 1)	world_1
SELECT country.name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1	world_1
SELECT Continent FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1	world_1
SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1	world_1
SELECT COUNT(DISTINCT cl1.CountryCode) FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'	world_1
SELECT COUNT(DISTINCT cl1.CountryCode) FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'	world_1
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'	world_1
SELECT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'English' INTERSECT SELECT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'French'	world_1
SELECT DISTINCT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language IN ('English', 'French') AND t2.IsOfficial = 'T' GROUP BY t1.Name HAVING COUNT(t2.Language) = 2	world_1
SELECT DISTINCT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	world_1
SELECT DISTINCT COUNT(t2.Continent) FROM countrylanguage AS t1 JOIN country AS t2 ON t1.CountryCode = t2.Code WHERE t1.Language = "Chinese"	world_1
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language = "Chinese"	world_1
SELECT DISTINCT Region FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language IN ('English', 'Dutch')	world_1
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')	world_1
SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch') AND T2.IsOfficial = 'T'	world_1
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'	world_1
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;	world_1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING count(DISTINCT CountryCode) = 1	world_1
SELECT Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1	world_1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1	world_1
SELECT CURRENT_DATE	world_1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix' AND IsOfficial = 'T')	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'	world_1
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')	world_1
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')	world_1
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' AND T1.Population > (SELECT MAX(T2.Population) FROM country AS T2 WHERE T2.Continent = 'Africa')	world_1
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'	world_1
SELECT c.Code FROM country AS c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'English') AND c.GovernmentForm <> 'Republic'	world_1
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = "Europe" AND cl.Language = "English" AND cl.IsOfficial = "F"	world_1
SELECT t1.Name FROM city AS t1 JOIN country AS t2 ON t1.CountryCode = t2.Code JOIN countrylanguage AS t3 ON t1.CountryCode = t3.CountryCode WHERE t2.Continent = 'Europe' AND t3.IsOfficial = 'F' AND t3.Language = 'English'	world_1
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'	world_1
SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON cl.CountryCode = co.Code WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'	world_1
SELECT t1.Name, t1.IndepYear, t1.SurfaceArea FROM country AS t1 ORDER BY t1.Population ASC LIMIT 1	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1	world_1
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;	world_1
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3	world_1
SELECT t1.Name, COUNT(t2.Language) AS Language_Count FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t1.Code HAVING Language_Count > 2	world_1
SELECT COUNT(city.ID), city.CountryCode FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.CountryCode;	world_1
SELECT country.Region, COUNT(*) FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY country.Region	world_1
SELECT T1.GovernmentForm, SUM(T1.Population) FROM country AS T1 WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm	world_1
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm	world_1
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72	world_1
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy < 72 GROUP BY Continent	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population BETWEEN 79000 AND 81000	world_1
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1	world_1
SELECT CountryCode, Language FROM countrylanguage WHERE (CountryCode, Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)	world_1
SELECT CountryCode, Language FROM countrylanguage WHERE (CountryCode, Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)	world_1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')	world_1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'	world_1
SELECT COUNT(*) FROM conductor	orchestra
SELECT COUNT(*) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Age ASC	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality <> 'USA'	orchestra
SELECT Name FROM conductor WHERE Nationality != "USA"	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Lõppvoorus'	orchestra
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != "Live final"	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor;	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor;	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)	orchestra
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID	orchestra
SELECT DISTINCT c.Name, o.Orchestra FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID	orchestra
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1)	orchestra
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1)	orchestra
SELECT t1.Name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.Conductor_ID = t2.Conductor_ID GROUP BY t1.Name ORDER BY COUNT(DISTINCT t2.Orchestra_ID) DESC LIMIT 1;	orchestra
SELECT Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT DISTINCT t1.Name FROM conductor AS t1 JOIN orchestra AS t2 ON t1.Conductor_ID = t2.Conductor_ID WHERE t2.Year_of_Founded > 2008	orchestra
SELECT DISTINCT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID WHERE O.Year_of_Founded > 2008	orchestra
SELECT t1.Record_Company, COUNT(DISTINCT t1.Orchestra_ID) FROM orchestra AS t1 GROUP BY t1.Record_Company;	orchestra
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company	orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC	orchestra
SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)	orchestra
SELECT t1.Orchestra FROM orchestra AS t1 LEFT JOIN performance AS t2 ON t1.Orchestra_ID = t2.Orchestra_ID WHERE t2.Performance_ID IS NULL	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;	orchestra
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"	orchestra
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	orchestra
SELECT DISTINCT o.Year_of_Founded FROM orchestra AS o JOIN performance AS p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;	orchestra
SELECT T2.Year_of_Founded FROM orchestra AS T2 JOIN performance AS T1 ON T2.Orchestra_ID = T1.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(T1.Performance_ID) > 1	orchestra
SELECT COUNT(*) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT grade FROM Highschooler	network_1
SELECT DISTINCT grade FROM Highschooler	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);	network_1
SELECT COUNT(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1	network_1
SELECT COUNT(*) FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id	network_1
SELECT COUNT(friend_id) FROM Friend GROUP BY student_id	network_1
SELECT t1.name, COUNT(t2.friend_id) AS friend_count FROM Highschooler AS t1 LEFT JOIN Friend AS t2 ON t1.ID = t2.student_id GROUP BY t1.ID	network_1
SELECT H1.name, COUNT(F.friend_id) FROM Highschooler H1 LEFT JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.ID, H1.name	network_1
SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1)	network_1
SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1)	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3)	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3)	network_1
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.student_id JOIN Highschooler AS H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'))	network_1
SELECT COUNT(*) FROM Highschooler AS h JOIN Friend AS f ON h.ID = f.student_id WHERE h.name = 'Kyle'	network_1
SELECT COUNT(*) FROM Friend JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle';	network_1
SELECT H.ID FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F2.friend_id FROM Friend F2);	network_1
SELECT H.ID FROM Highschooler H WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID);	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT DISTINCT F.student_id FROM Friend AS F JOIN Likes AS L ON F.student_id = L.liked_id	network_1
SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)	network_1
SELECT DISTINCT H1.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.student_id JOIN Likes AS L ON H1.ID = L.liked_id	network_1
SELECT DISTINCT H1.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.student_id JOIN Likes AS L ON H1.ID = L.liked_id	network_1
SELECT COUNT(*) FROM Likes GROUP BY student_id	network_1
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id	network_1
SELECT name, COUNT(liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name	network_1
SELECT name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY name	network_1
SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(student_id) DESC LIMIT 1)	network_1
SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(student_id) DESC LIMIT 1)	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2)	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(student_id) >= 2)	network_1
SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND (SELECT COUNT(*) FROM Friend AS T2 WHERE T2.student_id = T1.ID) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND (SELECT COUNT(*) FROM Friend AS T2 WHERE T2.student_id = T1.ID) >= 2	network_1
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"	network_1
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)	network_1
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND grade = (SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend))	network_1
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT DISTINCT O.state FROM Owners AS O JOIN Professionals AS P ON O.state = P.state	dog_kennels
SELECT AVG(CAST(age AS DECIMAL(10,2))) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)	dog_kennels
SELECT AVG(CAST(age AS INTEGER)) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)	dog_kennels
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)	dog_kennels
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = T1.professional_id) > 2	dog_kennels
SELECT DISTINCT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000	dog_kennels
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000	dog_kennels
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS all_first_names WHERE first_name NOT IN (SELECT name FROM Dogs)	dog_kennels
SELECT DISTINCT first_name FROM ( SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals ) AS first_names WHERE first_name NOT IN (SELECT name FROM Dogs)	dog_kennels
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM Treatments );	dog_kennels
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1	dog_kennels
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1)	dog_kennels
SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(Treatments.treatment_id) >= 2	dog_kennels
SELECT DISTINCT p.professional_id, p.role_code, p.first_name FROM Professionals AS p JOIN Treatments AS t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2	dog_kennels
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(dog_id) DESC LIMIT 1)	dog_kennels
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)	dog_kennels
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT owner_id, last_name FROM Owners WHERE owner_id = (SELECT dog.owner_id FROM Dogs AS dog JOIN Treatments AS treat ON dog.dog_id = treat.dog_id GROUP BY dog.owner_id ORDER BY SUM(treat.cost_of_treatment) DESC LIMIT 1);	dog_kennels
SELECT t1.treatment_type_description FROM Treatment_Types AS t1 JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_description ORDER BY SUM(t2.cost_of_treatment) LIMIT 1	dog_kennels
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)	dog_kennels
SELECT owner_id, zip_code FROM Owners WHERE owner_id = (SELECT dog.owner_id FROM Dogs AS dog JOIN Treatments AS treat ON dog.dog_id = treat.dog_id GROUP BY dog.owner_id ORDER BY SUM(treat.cost_of_treatment) DESC LIMIT 1)	dog_kennels
SELECT owner_id, zip_code FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)	dog_kennels
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)	dog_kennels
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;	dog_kennels
SELECT DISTINCT p.first_name, p.last_name FROM Professionals AS p JOIN Treatments AS t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT DISTINCT T2.first_name, T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT T2.date_of_treatment, T3.first_name FROM Treatments AS T2 JOIN Professionals AS T3 ON T2.professional_id = T3.professional_id	dog_kennels
SELECT t.date_of_treatment, p.first_name FROM Treatments AS t JOIN Professionals AS p ON t.professional_id = p.professional_id	dog_kennels
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments AS t JOIN Treatment_Types AS tt ON t.treatment_type_code = tt.treatment_type_code	dog_kennels
SELECT T.cost_of_treatment, TT.treatment_type_description FROM Treatments AS T JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code	dog_kennels
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code	dog_kennels
SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code	dog_kennels
SELECT DISTINCT o.first_name, d.name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id	dog_kennels
SELECT DISTINCT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id	dog_kennels
SELECT d.name, tr.date_of_treatment FROM Dogs AS d JOIN Treatments AS tr ON d.dog_id = tr.dog_id WHERE d.breed_code = (SELECT b.breed_code FROM Breeds AS b JOIN Dogs AS d ON b.breed_code = d.breed_code GROUP BY b.breed_code ORDER BY COUNT(d.dog_id) ASC LIMIT 1)	dog_kennels
SELECT d.name, t.date_of_treatment FROM Dogs AS d JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE d.breed_code = (SELECT b.breed_code FROM Dogs AS d JOIN Breeds AS b ON d.breed_code = b.breed_code GROUP BY b.breed_code ORDER BY COUNT(d.dog_id) ASC LIMIT 1)	dog_kennels
SELECT T5.first_name, T4.name FROM Dogs AS T4 JOIN Owners AS T5 ON T4.owner_id = T5.owner_id WHERE T5.state = "Virginia"	dog_kennels
SELECT DISTINCT o.first_name, d.name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'	dog_kennels
SELECT DISTINCT t1.date_arrived, t1.date_departed FROM Dogs AS t1 JOIN Treatments AS t2 ON t1.dog_id = t2.dog_id	dog_kennels
SELECT DISTINCT d.date_arrived, d.date_departed FROM Dogs AS d JOIN Treatments AS t ON d.dog_id = t.dog_id	dog_kennels
SELECT O.last_name FROM Dogs AS D JOIN Owners AS O ON D.owner_id = O.owner_id ORDER BY D.age ASC LIMIT 1	dog_kennels
SELECT O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth DESC LIMIT 1	dog_kennels
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')	dog_kennels
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS DECIMAL) < (SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs)	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs)	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;	dog_kennels
SELECT COUNT(*) FROM Dogs AS d LEFT JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT COUNT(*) FROM Dogs AS d LEFT JOIN Treatments AS t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL	dog_kennels
SELECT DISTINCT T1.owner_id FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.dog_id IS NULL	dog_kennels
SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)	dog_kennels
SELECT COUNT(*) FROM Professionals AS p WHERE NOT EXISTS (SELECT 1 FROM Treatments AS t WHERE t.professional_id = p.professional_id)	dog_kennels
SELECT COUNT(*) FROM Professionals AS p WHERE NOT EXISTS (SELECT 1 FROM Treatments AS t WHERE t.professional_id = p.professional_id)	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT MAX(age) FROM Dogs	dog_kennels
SELECT age FROM Dogs ORDER BY date_of_birth ASC LIMIT 1;	dog_kennels
SELECT charge_type, charge_amount FROM Charges	dog_kennels
SELECT charge_type, charge_amount FROM Charges	dog_kennels
SELECT MAX(charge_amount) FROM Charges	dog_kennels
SELECT MAX(charge_amount) FROM Charges	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals;	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes	dog_kennels
SELECT DISTINCT breed_code, size_code FROM Dogs;	dog_kennels
SELECT DISTINCT t2.first_name, t4.treatment_type_description FROM Professionals AS t2 JOIN Treatments AS t1 ON t2.professional_id = t1.professional_id JOIN Treatment_Types AS t4 ON t1.treatment_type_code = t4.treatment_type_code	dog_kennels
SELECT T2.first_name, T3.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT COUNT(*) FROM singer;	singer
SELECT COUNT(DISTINCT Singer_ID) FROM singer;	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT "Birth_Year", "Citizenship" FROM singer;	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship <> "Prantsusmaa"	singer
SELECT Name FROM singer WHERE Citizenship != 'Prantsuse'	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)	singer
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship;	singer
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship	singer
SELECT MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship	singer
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID	singer
SELECT s.title, si.name FROM song AS s JOIN singer AS si ON s.singer_id = si.singer_id;	singer
SELECT DISTINCT s.Name FROM singer AS s JOIN song AS so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000	singer
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000	singer
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1);	singer
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(Song_ID) > 1)	singer
SELECT t1.Name, SUM(t2.Sales) FROM singer AS t1 JOIN song AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Name	singer
SELECT s.Singer_ID, SUM(so.Sales) AS Total_Sales FROM song AS so JOIN singer AS s ON so.Singer_ID = s.Singer_ID GROUP BY s.Singer_ID	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);	singer
SELECT title FROM song WHERE Sales IS NULL	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1	singer
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955	singer
SELECT COUNT(*) FROM Other_Available_Features	real_estate_properties
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = "AirCon")	real_estate_properties
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'kood'	real_estate_properties
SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1	real_estate_properties
