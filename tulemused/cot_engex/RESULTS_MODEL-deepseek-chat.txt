SELECT COUNT(*) FROM singer;	concert_singer
SELECT COUNT(*) FROM singer	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;	concert_singer
SELECT Here's the SQL query to find the average, minimum, and maximum age of all French singers: ```sql SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'Prantsuse'	concert_singer
SELECT Here's the SQL query to find the average, minimum, and maximum age of all French singers: ```sql SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'Prantsuse'	concert_singer
SELECT t1.Song_Name, t1.Song_release_year FROM singer AS t1 WHERE t1.Age = (SELECT MIN(Age) FROM singer)	concert_singer
SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20;	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT s.Country, COUNT(s.Singer_ID) AS Singer_Count FROM singer s GROUP BY s.Country;	concert_singer
SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;	concert_singer
SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);	concert_singer
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;	concert_singer
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Max_Capacity FROM stadium	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)	concert_singer
SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = "2014" OR Year = "2015"	concert_singer
SELECT COUNT(*) FROM concert WHERE Year = "2014" OR Year = "2015"	concert_singer
SELECT t1.Name, COUNT(t2.concert_ID) FROM stadium AS t1 LEFT JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID GROUP BY t1.Stadium_ID;	concert_singer
SELECT s.Name, COUNT(c.concert_ID) AS kontsertide_arv FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= '2014' GROUP BY T1.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;	concert_singer
SELECT T2.Name, T2.Capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year >= '2013' GROUP BY T1.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;	concert_singer
SELECT Stadium_ID, Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	concert_singer
SELECT Country FROM singer WHERE Age > 40 UNION SELECT Country FROM singer WHERE Age < 30;	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = "2014")	concert_singer
SELECT Here's the SQL query to find the names of all stadiums where no concerts took place in 2014: ```sql SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')	concert_singer
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS singer_count FROM concert AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme	concert_singer
SELECT t1.concert_Name, t1.Theme, COUNT(t2.Singer_ID) FROM concert AS t1 LEFT JOIN singer_in_concert AS t2 ON t1.concert_ID = t2.concert_ID GROUP BY t1.concert_ID, t1.concert_Name, t1.Theme	concert_singer
SELECT t1.Name, COUNT(t2.concert_ID) FROM singer AS t1 LEFT JOIN singer_in_concert AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Name	concert_singer
SELECT s.Name, COUNT(sic.concert_ID) FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	concert_singer
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = "2014"	concert_singer
SELECT T2.Name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T1.concert_ID = T3.concert_ID WHERE T3.Year = "2014"	concert_singer
SELECT Name, Country FROM singer WHERE Song_Name LIKE "%Hey%"	concert_singer
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'	concert_singer
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'	concert_singer
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015')	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 )	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	concert_singer
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;	pets_1
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;	pets_1
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType;	pets_1
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType	pets_1
SELECT COUNT(Pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20	pets_1
SELECT COUNT(*) FROM Has_Pet WHERE StuID IN ( SELECT StuID FROM Student WHERE Age >= 20 )	pets_1
SELECT COUNT(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'Dog' AND T3.Sex = 'F'	pets_1
SELECT COUNT(Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'Dog' AND Student.Sex = 'F'	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets;	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE PetType = 'kass' OR PetType = 'koer'	pets_1
SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('kass', 'koer')	pets_1
SELECT Here's the SQL query to find students' first names who have both a cat and a dog as pets: ```sql SELECT DISTINCT S.Fname FROM Student AS S WHERE EXISTS ( SELECT 1 FROM Has_Pet AS HP1 JOIN Pets AS P1 ON HP1.PetID = P1.PetID WHERE HP1.StuID = S.StuID AND P1.PetType = 'cat' ) AND EXISTS ( SELECT 1 FROM Has_Pet AS HP2 JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'dog' )	pets_1
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP1 ON S.StuID = HP1.StuID JOIN Pets AS P1 ON HP1.PetID = P1.PetID AND P1.PetType = 'Cat' JOIN Has_Pet AS HP2 ON S.StuID = HP2.StuID JOIN Pets AS P2 ON HP2.PetID = P2.PetID AND P2.PetType = 'Dog'	pets_1
SELECT Here's the SQL query to find the majors and ages of students who don't have cat pets: ```sql SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN ( SELECT HP.StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'Cat' )	pets_1
SELECT s.Major, s.Age FROM Student s WHERE s.StuID NOT IN ( SELECT hp.StuID FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' ) 	pets_1
SELECT Here's the SQL query to find the student IDs who don't have a cat as a pet: ```sql SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')	pets_1
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' )	pets_1
SELECT Here's the SQL query to find the first names and ages of students who have a dog but don't have a cat as a pet: ```sql SELECT S.Fname, S.Age FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN ( SELECT S2.StuID FROM Student AS S2 JOIN Has_Pet AS HP2 ON S2.StuID = HP2.StuID JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'cat' )	pets_1
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'Dog' AND S.StuID NOT IN ( SELECT S2.StuID FROM Student AS S2 JOIN Has_Pet AS HP2 ON S2.StuID = HP2.StuID JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'Cat' )	pets_1
SELECT t1.PetType, t1.weight FROM Pets AS t1 ORDER BY t1.pet_age ASC, t1.weight ASC LIMIT 1;	pets_1
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1;	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1;	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT Here's the SQL query to find the average and maximum age for each pet type: ```sql SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(pet_age) AS keskmine_vanus, MAX(pet_age) AS maksimaalne_vanus FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType	pets_1
SELECT PetType, AVG(weight) AS keskmine_kaal FROM Pets GROUP BY PetType;	pets_1
SELECT Fname, Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT T2.PetID FROM Has_Pet AS T2 JOIN Student AS T1 ON T1.StuID = T2.StuID WHERE T1.LName = "Smith"	pets_1
SELECT t2.PetID FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID WHERE t1.LName = 'Smith'	pets_1
SELECT T1.StuID, COUNT(T2.PetID) AS pet_count FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID;	pets_1
SELECT T1.StuID, COUNT(T2.PetID) AS pet_count FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID	pets_1
SELECT Here's the SQL query to find the first names and genders of students who have more than one pet: ```sql SELECT T1.Fname, T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1	pets_1
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)	pets_1
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'kass' AND T3.pet_age = 3;	pets_1
SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'kass' AND P.pet_age = 3	pets_1
SELECT AVG(S.Age) FROM Student S WHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT AVG(S.Age) FROM Student AS S WHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet)	pets_1
SELECT COUNT(*) FROM continents	car_1
SELECT COUNT(*) FROM continents;	car_1
SELECT t1.ContId, t1.Continent, COUNT(t2.CountryId) AS CountryCount FROM continents AS t1 JOIN countries AS t2 ON t1.ContId = t2.Continent GROUP BY t1.ContId, t1.Continent	car_1
SELECT t1.ContId, t1.Continent, COUNT(t2.CountryId) AS CountryCount FROM continents AS t1 LEFT JOIN countries AS t2 ON t1.ContId = t2.Continent GROUP BY t1.ContId, t1.Continent	car_1
SELECT COUNT(*) FROM countries;	car_1
SELECT COUNT(*) FROM countries;	car_1
SELECT Here's the SQL query to count how many models each car maker produces, listing the maker's full name, ID, and count: ```sql SELECT t1.Id, t1.FullName, COUNT(t2.ModelId) AS ModelCount FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id, t1.FullName	car_1
SELECT Here's the SQL query to find each car maker's full name, their ID, and how many models they produce: ```sql SELECT t1.Id, t1.FullName, COUNT(t2.ModelId) AS ModelCount FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.Id, t1.FullName	car_1
SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)	car_1
SELECT t1.Model FROM model_list AS t1 JOIN car_names AS t2 ON t1.Model = t2.Model JOIN cars_data AS t3 ON t2.MakeId = t3.Id ORDER BY CAST(t3.Horsepower AS INTEGER) ASC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data)	car_1
SELECT Here's the SQL query to find the car model with weight less than average: ```sql SELECT t3.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model WHERE t1.Weight < (SELECT AVG(Weight) FROM cars_data)	car_1
SELECT DISTINCT T2.Maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = 1970;	car_1
SELECT DISTINCT T2.Maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = 1970	car_1
SELECT T2.Make, T3.Year FROM car_names AS T2 JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Year ASC LIMIT 1	car_1
SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id ORDER BY cd.Year ASC LIMIT 1;	car_1
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;	car_1
SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980	car_1
SELECT Here's the SQL query to count car makers per continent, listing continent names and the corresponding count: ```sql SELECT t1.Continent, COUNT(t3.Id) AS AutotootjateArv FROM continents AS t1 JOIN countries AS t2 ON t1.ContId = t2.Continent JOIN car_makers AS t3 ON t2.CountryId = t3.Country GROUP BY t1.Continent	car_1
SELECT Here's the SQL query to find each continent's name and the count of car makers on each continent: ```sql SELECT t1.Continent, COUNT(t3.Id) AS CarMakerCount FROM continents AS t1 JOIN countries AS t2 ON t1.ContId = t2.Continent JOIN car_makers AS t3 ON t2.CountryId = t3.Country GROUP BY t1.Continent	car_1
SELECT t2.CountryName FROM car_makers AS t1 JOIN countries AS t2 ON t1.Country = t2.CountryId GROUP BY t1.Country ORDER BY COUNT(t1.Id) DESC LIMIT 1;	car_1
SELECT t2.CountryName FROM car_makers AS t1 JOIN countries AS t2 ON t1.Country = t2.CountryId GROUP BY t1.Country ORDER BY COUNT(*) DESC LIMIT 1;	car_1
SELECT Here's the SQL query to count how many car models each manufacturer produces, listing only the count and the manufacturer's full name: ```sql SELECT COUNT(t2.ModelId) AS model_count, t1.FullName FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker GROUP BY t1.FullName	car_1
SELECT t1.Maker, t2.FullName, COUNT(t3.ModelId) AS ModelCount FROM model_list AS t3 JOIN car_makers AS t2 ON t3.Maker = t2.Id JOIN countries AS t1 ON t2.Country = t1.CountryId GROUP BY t1.Maker, t2.FullName;	car_1
SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = "AMC Hornet Sportabout (SW)")	car_1
SELECT Accelerate FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId WHERE t2.Make = "AMC Hornet Sportabout (sw)";	car_1
SELECT COUNT(*) FROM car_makers AS t1 JOIN countries AS t2 ON t1.Country = t2.CountryId WHERE t2.CountryName = "France"	car_1
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');	car_1
SELECT COUNT(*) FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA'	car_1
SELECT COUNT(*) FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = "United States"	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;	car_1
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;	car_1
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;	car_1
SELECT t1.Maker, t2.Model FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker;	car_1
SELECT Here's the SQL query to list countries that have at least one car maker, showing their name and ID: ```sql SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country	car_1
SELECT DISTINCT t2.CountryId, t2.CountryName FROM countries AS t2 JOIN car_makers AS t1 ON t2.CountryId = t1.Country WHERE t1.Id IS NOT NULL	car_1
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150	car_1
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150	car_1
SELECT T2.Year, AVG(T2.Weight) AS AvgWeight FROM cars_data AS T2 GROUP BY T2.Year	car_1
SELECT AVG(Weight) AS keskmine_kaal, Year FROM cars_data GROUP BY Year;	car_1
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN continents AS T3 ON T1.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T1.CountryName HAVING COUNT(DISTINCT T2.Id) >= 3	car_1
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(T1.Id) >= 3	car_1
SELECT MAX(T1.Horsepower), T2.Maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3	car_1
SELECT Here's the SQL query to find the maximum horsepower for 3-cylinder models and the corresponding make: ```sql SELECT MAX(cd.Horsepower) AS MaxHorsepower, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 3 GROUP BY cn.Make ORDER BY MaxHorsepower DESC LIMIT 1	car_1
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.MPG DESC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG ASC LIMIT 1	car_1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Volvo'	car_1
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo'	car_1
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders	car_1
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;	car_1
SELECT Here's the SQL query to find which model has the most versions (variants) of cars: ```sql SELECT t2.Model FROM car_names AS t1 JOIN model_list AS t2 ON t1.Model = t2.Model GROUP BY t1.Model ORDER BY COUNT(*) DESC LIMIT 1	car_1
SELECT model_list.Model, COUNT(car_names.Make) AS version_count FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY version_count DESC LIMIT 1;	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "American Motor Company"	car_1
SELECT COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "American Motor Company"	car_1
SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.ModelId) > 3	car_1
SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) > 3	car_1
SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T3 ON T1.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T5 ON T4.MakeId = T5.Id WHERE T1.FullName = 'General Motors' OR T5.Weight > 3500	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 LEFT JOIN car_makers AS T2 ON T1.Maker = T2.Id LEFT JOIN car_names AS T3 ON T1.Model = T3.Model LEFT JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;	car_1
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1;	car_1
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)	car_1
SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Volvo' ORDER BY T1.Accelerate DESC LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Id IN ( SELECT MakeId FROM car_names WHERE Model IN ( SELECT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Maker = 'Volvo' ) ) ) ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data ORDER BY CAST(Horsepower AS INTEGER) DESC LIMIT 1 )	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1)	car_1
SELECT Here's the SQL query to count how many countries have more than 2 car makers: ```sql SELECT COUNT(*) FROM ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2 ) AS subquery	car_1
SELECT COUNT(*) FROM ( SELECT c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2 ) AS countries_with_more_than_2_makers	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders = 6	car_1
SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY CAST(T2.Horsepower AS INTEGER) DESC LIMIT 1	car_1
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 4 ORDER BY CAST(T1.Horsepower AS INTEGER) DESC LIMIT 1;	car_1
SELECT T1.Make, T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T3.Cylinders <= 3	car_1
SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower IS NULL AND T4.Cylinders < 4	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.FullName != 'Ford Motor Company'	car_1
SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName != "Ford Motor Company"	car_1
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)	car_1
SELECT Here's the SQL query to find countries that don't have any car makers: ```sql SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL	car_1
SELECT Here's the SQL query to find car makers that produce at least 2 models and there are more than 3 such car makers, listing their ID and maker name: ```sql SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) >= 2 AND (SELECT COUNT(*) FROM (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(ModelId) >= 2) AS subquery) > 3	car_1
SELECT Here's the SQL query to find car maker IDs and companies that produce at least 2 models and over 3 cars: ```sql SELECT t1.Id, t1.FullName FROM car_makers AS t1 JOIN model_list AS t2 ON t1.Id = t2.Maker JOIN car_names AS t3 ON t2.Model = t3.Model GROUP BY t1.Id, t1.FullName HAVING COUNT(DISTINCT t2.ModelId) >= 2 AND COUNT(t3.MakeId) > 3	car_1
SELECT Here's the SQL query to find the country IDs and names that have more than 3 car makers or produce the 'fiat' model: ```sql SELECT DISTINCT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country LEFT JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T2.Id IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 ) OR T3.Model = 'fiat'	car_1
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker IN ( SELECT Maker FROM model_list WHERE Model LIKE 'Fiat%' ) OR T1.CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 )	car_1
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Country FROM airlines WHERE Airline = "Jetblue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways";	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = "Anthony"	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';	flight_2
SELECT COUNT(*) FROM airlines;	flight_2
SELECT COUNT(*) FROM airlines	flight_2
SELECT COUNT(*) FROM airports;	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = "UAL"	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = "UAL"	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = "USA";	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'	flight_2
SELECT City, Country FROM airports WHERE AirportName = 'Altoni lennujaam';	flight_2
SELECT AirportCode FROM airports WHERE City = "Altoni" AND Country = "Ameerika Ühendriigid"	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE City = "Aberdeen"	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen';	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ';	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways');	flight_2
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = "United Airlines") AND DestAirport = "ASY"	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United Airlines" AND T1.DestAirport = "ASY"	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United Airlines" AND T1.SourceAirport = "AHD"	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United Airlines" AND T1.SourceAirport = "AHD"	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.Airline = "United Airlines" AND T3.City = "Aberdeen"	flight_2
SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = "United Airlines" AND T1.DestAirport IN (SELECT AirportCode FROM airports WHERE City = "Aberdeen")	flight_2
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;	flight_2
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;	flight_2
SELECT T1.City, COUNT(*) AS departure_count FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY departure_count DESC LIMIT 1;	flight_2
SELECT airports.City, COUNT(*) AS flight_count FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY flight_count DESC LIMIT 1;	flight_2
SELECT Here's the SQL query to find the airport code with the most flights: ```sql SELECT SourceAirport FROM ( SELECT SourceAirport, COUNT(*) AS flight_count FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport, COUNT(*) AS flight_count FROM flights GROUP BY DestAirport ) AS combined_flights GROUP BY SourceAirport ORDER BY SUM(flight_count) DESC LIMIT 1	flight_2
SELECT Here's the SQL query to find the airport code with the most flights (either as source or destination): ```sql SELECT airport_code FROM ( SELECT SourceAirport AS airport_code, COUNT(*) AS flight_count FROM flights GROUP BY SourceAirport UNION ALL SELECT DestAirport AS airport_code, COUNT(*) AS flight_count FROM flights GROUP BY DestAirport ) GROUP BY airport_code ORDER BY SUM(flight_count) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;	flight_2
SELECT T1.Airline, COUNT(*) AS flight_count FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY flight_count DESC LIMIT 1	flight_2
SELECT T1.Airline, COUNT(*) AS flight_count FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY flight_count DESC LIMIT 1;	flight_2
SELECT t1.Abbreviation, t1.Country FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline GROUP BY t2.Airline ORDER BY COUNT(*) ASC LIMIT 1;	flight_2
SELECT T1.Airline, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY COUNT(*) ASC LIMIT 1;	flight_2
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = "AHD"	flight_2
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'	flight_2
SELECT Here's the SQL query to find all airlines that have flights from both 'APG' and 'CVO' airports: ```sql SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO'	flight_2
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'	flight_2
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.uid NOT IN ( SELECT T3.Airline FROM flights AS T3 WHERE T3.SourceAirport = 'APG' )	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10	flight_2
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200	flight_2
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = "United Airlines")	flight_2
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = "APG"	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = "APG"	flight_2
SELECT t2.FlightNo FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport WHERE t1.AirportName = 'APG'	flight_2
SELECT f.FlightNo FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = "Aberdeen"	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ'	flight_2
SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen"	flight_2
SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND Airline = (SELECT uid FROM airlines WHERE Airline = 'Anna')	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')	flight_2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)	flight_2
SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)	flight_2
SELECT COUNT(*) FROM employee;	employee_hire_evaluation
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC;	employee_hire_evaluation
SELECT City, COUNT(*) AS Employee_Count FROM employee GROUP BY City;	employee_hire_evaluation
SELECT City, COUNT(*) AS Employee_Count FROM employee GROUP BY City;	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;	employee_hire_evaluation
SELECT Location, COUNT(*) AS Shop_Count FROM shop GROUP BY Location;	employee_hire_evaluation
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;	employee_hire_evaluation
SELECT t1.Manager_name, t1.District FROM shop AS t1 ORDER BY t1.Number_products DESC LIMIT 1;	employee_hire_evaluation
SELECT t1.Manager_name, t1.District FROM shop AS t1 WHERE t1.Number_products = (SELECT MAX(t2.Number_products) FROM shop AS t2);	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop;	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop;	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 WHERE T1.Number_products > (SELECT avg(Number_products) FROM shop)	employee_hire_evaluation
SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(*) DESC LIMIT 1;	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 LEFT JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Employee_ID IS NULL	employee_hire_evaluation
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL	employee_hire_evaluation
SELECT t1.Name FROM shop AS t1 JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Shop_ID ORDER BY COUNT(t2.Employee_ID) DESC LIMIT 1;	employee_hire_evaluation
SELECT t1.Name FROM shop AS t1 JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Shop_ID ORDER BY COUNT(t2.Employee_ID) DESC LIMIT 1;	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL;	employee_hire_evaluation
SELECT t1.Name FROM shop AS t1 LEFT JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID WHERE t2.Employee_ID IS NULL;	employee_hire_evaluation
SELECT s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;	employee_hire_evaluation
SELECT s.Name, COUNT(h.Employee_ID) AS Employee_Count FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation;	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT DISTINCT District FROM shop WHERE Number_products < 3000 OR Number_products > 10000;	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop;	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop;	employee_hire_evaluation
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents;	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents;	cre_Doc_Template_Mgt
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 WHERE T1.Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = "PPT"	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT t.Template_ID, COUNT(d.Document_ID) AS document_count FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;	cre_Doc_Template_Mgt
SELECT t.Template_ID, COUNT(d.Document_ID) AS usage_count FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT t1.Template_ID, t1.Template_Type_Code FROM Templates AS t1 JOIN Documents AS t2 ON t1.Template_ID = t2.Template_ID GROUP BY t1.Template_ID, t1.Template_Type_Code ORDER BY COUNT(t2.Document_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1	cre_Doc_Template_Mgt
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NULL	cre_Doc_Template_Mgt
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates;	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = "CV"	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) AS Mallide_Arv FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT t.Template_Type_Code, COUNT(t.Template_ID) AS Mallide_Arv FROM Templates t GROUP BY t.Template_Type_Code;	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Template_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT Here's the SQL query to display all template type codes that have fewer than three templates: ```sql SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT MIN(Version_Number), Template_Type_Code FROM Templates;	cre_Doc_Template_Mgt
SELECT MIN(T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT Here's the SQL query to display all template type codes and the count of documents using each type: ```sql SELECT t1.Template_Type_Code, COUNT(t3.Document_ID) AS document_count FROM Ref_Template_Types AS t1 LEFT JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code LEFT JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID GROUP BY t1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(DISTINCT T2.Document_ID) AS Document_Count FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T3.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Here's the SQL query to return the most frequently used template type code in documents: ```sql SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN ( SELECT DISTINCT Template_ID FROM Documents ) )	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_ID IS NULL	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Raamat";	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Raamat";	cre_Doc_Template_Mgt
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code	cre_Doc_Template_Mgt
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Esitlus"	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Esitlus'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')	cre_Doc_Template_Mgt
SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'	cre_Doc_Template_Mgt
SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'	cre_Doc_Template_Mgt
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')	cre_Doc_Template_Mgt
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')	cre_Doc_Template_Mgt
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = "Klientide arvustused")	cre_Doc_Template_Mgt
SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Klientide arvustused'	cre_Doc_Template_Mgt
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID	cre_Doc_Template_Mgt
SELECT Here's the SQL query to return distinct document IDs along with their corresponding paragraph counts, ordered by document IDs: ```sql SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID	cre_Doc_Template_Mgt
SELECT Here's the SQL query to display all document IDs, names, and the count of paragraphs in each document: ```sql SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;	cre_Doc_Template_Mgt
SELECT Here's the SQL query to return the document ID and name with the most paragraphs: ```sql SELECT t1.Document_ID, t1.Document_Name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID GROUP BY t1.Document_ID, t1.Document_Name ORDER BY COUNT(t2.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY Paragraph_Count ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = ( SELECT MIN(paragraph_count) FROM ( SELECT COUNT(Paragraph_ID) AS paragraph_count FROM Paragraphs GROUP BY Document_ID ) AS counts ) );	cre_Doc_Template_Mgt
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 )	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;	cre_Doc_Template_Mgt
SELECT DISTINCT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Brasiilia%' AND p.Document_ID IN ( SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Iirimaa%' )	cre_Doc_Template_Mgt
SELECT DISTINCT p.Document_ID FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Brasiilia%' AND p.Paragraph_Text LIKE '%Iirimaa%'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM teacher	course_teach
SELECT COUNT(*) FROM teacher;	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Age, Hometown FROM teacher;	course_teach
SELECT Age, Hometown FROM teacher;	course_teach
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban District"	course_teach
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban District"	course_teach
SELECT Name FROM teacher WHERE Age = "32" OR Age = "33"	course_teach
SELECT Name FROM teacher WHERE Age = "32" OR Age = "33"	course_teach
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1	course_teach
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1	course_teach
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;	course_teach
SELECT T1.Hometown, COUNT(*) FROM teacher AS T1 GROUP BY T1.Hometown	course_teach
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC;	course_teach
SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC;	course_teach
SELECT t1.Hometown FROM teacher AS t1 GROUP BY t1.Hometown HAVING COUNT(*) >= 2;	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2	course_teach
SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID	course_teach
SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID	course_teach
SELECT t2.Name, t1.Course FROM course AS t1 JOIN course_arrange AS t3 ON t1.Course_ID = t3.Course_ID JOIN teacher AS t2 ON t3.Teacher_ID = t2.Teacher_ID ORDER BY t2.Name ASC	course_teach
SELECT T2.Name, T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name	course_teach
SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course = "matemaatika"	course_teach
SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = "matemaatika"))	course_teach
SELECT t2.Name, COUNT(t1.Course_ID) FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t2.Name	course_teach
SELECT t.Name, COUNT(ca.Course_ID) FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	course_teach
SELECT t2.Name FROM course_arrange AS t1 JOIN teacher AS t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t1.Teacher_ID HAVING COUNT(DISTINCT t1.Course_ID) >= 2;	course_teach
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;	course_teach
SELECT t.Name FROM teacher AS t LEFT JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL;	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)	course_teach
SELECT COUNT(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;	museum_visit
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;	museum_visit
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;	museum_visit
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009'	museum_visit
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = "Plaza Muuseum";	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')	museum_visit
SELECT V.ID, V.Name, V.Age FROM visitor AS V JOIN visit AS Vi ON V.ID = Vi.visitor_ID GROUP BY V.ID, V.Name, V.Age HAVING COUNT(*) > 1;	museum_visit
SELECT Here's the SQL query to find the visitor IDs, names, and membership levels who have spent the most money on all museum tickets combined: ```sql SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Total_spent) DESC LIMIT 1	museum_visit
SELECT Here's the SQL query to find the most visited museum's ID and name: ```sql SELECT m.Museum_ID, m.Name FROM museum AS m JOIN visit AS v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY SUM(v.Num_of_Ticket) DESC LIMIT 1	museum_visit
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)	museum_visit
SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Num_of_Ticket DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket) AS Keskmine_piletite_arv, MAX(Num_of_Ticket) AS Maksimaalne_piletite_arv FROM visit;	museum_visit
SELECT SUM(visit.Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1	museum_visit
SELECT DISTINCT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < '2009' INTERSECT SELECT DISTINCT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year > '2011'	museum_visit
SELECT COUNT(*) FROM visitor WHERE ID NOT IN ( SELECT DISTINCT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE CAST(museum.Open_Year AS INTEGER) > 2010 )	museum_visit
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'	museum_visit
SELECT count(*) FROM players	wta_1
SELECT COUNT(*) FROM players	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches	wta_1
SELECT m.surface, AVG(m.winner_age) AS avg_winner_age, AVG(m.loser_age) AS avg_loser_age FROM matches m GROUP BY m.surface	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT MAX(loser_rank) FROM matches	wta_1
SELECT MIN(loser_rank) FROM matches	wta_1
SELECT COUNT(DISTINCT country_code) FROM players;	wta_1
SELECT COUNT(DISTINCT country_code) FROM players;	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10	wta_1
SELECT Here's the SQL query to list all winners who played in both 2013 and 2016: ```sql SELECT DISTINCT T1.winner_name FROM matches AS T1 JOIN matches AS T2 ON T1.winner_id = T2.winner_id WHERE T1.year = 2013 AND T2.year = 2016	wta_1
SELECT Here's the SQL query to find the names of players who won in both 2013 and 2016: ```sql SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016	wta_1
SELECT * FROM matches WHERE year = 2013 OR year = 2016;	wta_1
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;	wta_1
SELECT Here's the SQL query to find the country codes and first names of players who won both the WTA Championships and the Australian Open: ```sql SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open'	wta_1
SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' OR T2.tourney_name = 'Australian Open'	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date;	wta_1
SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date	wta_1
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;	wta_1
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1	wta_1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;	wta_1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;	wta_1
SELECT Here's the SQL query to find the winner's name and ranking points who has won the most times: ```sql SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT p.first_name || ' ' || p.last_name AS player_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(m.winner_id) DESC LIMIT 1;	wta_1
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name LIKE '%Australian Open%' ORDER BY m.winner_rank_points DESC LIMIT 1;	wta_1
SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' AND tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT T1.loser_name, T1.winner_name FROM matches AS T1 WHERE T1.minutes = (SELECT MAX(minutes) FROM matches)	wta_1
SELECT T1.winner_name, T1.loser_name FROM matches AS T1 WHERE T1.minutes = (SELECT MAX(minutes) FROM matches)	wta_1
SELECT AVG(T2.ranking) AS average_ranking, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name	wta_1
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT p.first_name, SUM(r.ranking_points) AS total_rating_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name	wta_1
SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name	wta_1
SELECT country_code, COUNT(*) AS mängijate_arv FROM players GROUP BY country_code;	wta_1
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT Based on the given database schema and the Estonian query which translates to "Find the total number of excursions for each ranking date", I notice there isn't a direct "excursions" table in the schema. However, if we interpret "excursions" as possibly meaning "matches" or "rankings", I'll provide a query that counts records per ranking date from the rankings table: ```sql SELECT ranking_date, COUNT(*) FROM rankings GROUP BY ranking_date	wta_1
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date	wta_1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;	wta_1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;	wta_1
SELECT winner_name, winner_ioc FROM matches ORDER BY winner_age ASC LIMIT 3	wta_1
SELECT winner_name, winner_ioc FROM matches ORDER BY winner_age ASC LIMIT 3;	wta_1
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_level = 'WTA'	wta_1
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_level = 'WTA' AND tourney_name LIKE '%Championships%'	wta_1
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)	wta_1
SELECT Here's the SQL query to find the player's first name, country code, and birth date who has the highest total winner points across all matches: ```sql SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, SUM(winner_rank_points) AS total_points FROM matches GROUP BY winner_id ORDER BY total_points DESC LIMIT 1 ) m ON p.player_id = m.winner_id	wta_1
SELECT hand, COUNT(*) AS mängijate_arv FROM players GROUP BY hand	wta_1
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;	wta_1
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Kinni püütud'	battle_death
SELECT name, tonnage FROM ship ORDER BY name DESC	battle_death
SELECT name, date, result FROM battle	battle_death
SELECT Here's the SQL query to find the maximum and minimum number of death cases caused by each ship: ```sql SELECT max(killed), min(killed) FROM death	battle_death
SELECT AVG(injured) FROM death	battle_death
SELECT T2.killed, T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = 't'	battle_death
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'	battle_death
SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'	battle_death
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING SUM(T3.killed) > 10	battle_death
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id ORDER BY d.injured DESC LIMIT 1;	battle_death
SELECT DISTINCT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = "Kaloyan" AND T1.latin_commander = "Baldwin I"	battle_death
SELECT COUNT(DISTINCT result) FROM battle;	battle_death
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')	battle_death
SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'	battle_death
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN ( SELECT s.lost_in_battle FROM ship s WHERE s.location = "La Manche'i väinas" ) 	battle_death
SELECT note FROM death WHERE note LIKE '%East%'	battle_death
SELECT line_1, line_2 FROM Addresses;	student_transcripts_tracking
SELECT line_1, line_2 FROM Addresses;	student_transcripts_tracking
SELECT COUNT(*) FROM Courses;	student_transcripts_tracking
SELECT COUNT(*) FROM Courses;	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'matemaatikakursus'	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name LIKE '%matemaatika%'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea";	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea"	student_transcripts_tracking
SELECT Here's the SQL query to find which department offers the most degrees, listing the department name and id: ```sql SELECT T1.department_id, T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the department name and ID with the most degrees: ```sql SELECT D.department_id, D.department_name FROM Departments AS D JOIN Degree_Programs AS DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT Here's the SQL query to count how many different departments offer degree programs: ```sql SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = "tehnikaosakond")	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'inseneriteaduskond')	student_transcripts_tracking
SELECT section_name, section_description FROM Sections;	student_transcripts_tracking
SELECT section_name, section_description FROM Sections	student_transcripts_tracking
SELECT Here's the SQL query to find the course names and IDs that have a maximum of 2 sections: ```sql SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2	student_transcripts_tracking
SELECT C.course_id, C.course_name FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) < 2;	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT Here's the SQL query to find the semester with the most student registrations, showing both the name and ID: ```sql SELECT S.semester_id, S.semester_name FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY COUNT(SE.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the semester with the highest number of enrolled students, returning the semester name and ID: ```sql SELECT S.semester_id, S.semester_name FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name ORDER BY COUNT(SE.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%arvuti%'	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE '%arvuti%'	student_transcripts_tracking
SELECT Here's the SQL query to find students who are registered in two degree programs in one semester, listing their first name, middle name, last name, and ID: ```sql SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S JOIN Student_Enrolment SE1 ON S.student_id = SE1.student_id JOIN Student_Enrolment SE2 ON S.student_id = SE2.student_id AND SE1.semester_id = SE2.semester_id AND SE1.degree_program_id != SE2.degree_program_id GROUP BY S.student_id, S.first_name, S.middle_name, S.last_name HAVING COUNT(DISTINCT SE1.degree_program_id) >= 2	student_transcripts_tracking
SELECT Here's the SQL query to find the first names, middle names, last names, and IDs of students who enrolled in two degree programs in one semester: ```sql SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE 'Bakalaureus%' OR T3.degree_summary_name LIKE 'Bachelor%'	student_transcripts_tracking
SELECT Here's the SQL query to find the first, middle, and last names of all students enrolled in bachelor's degree programs: ```sql SELECT s.first_name, s.middle_name, s.last_name FROM Students AS s JOIN Student_Enrolment AS se ON s.student_id = se.student_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'	student_transcripts_tracking
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id, COUNT(*) AS student_count FROM Student_Enrolment AS T1 GROUP BY T1.degree_program_id ORDER BY student_count DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the program with the most enrolled students, listing both the ID and summary: ```sql SELECT T1.degree_program_id, T1.degree_summary_name, COUNT(*) AS student_count FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY student_count DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the degree program code and degree summary name that has the most students enrolled: ```sql SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the student who has enrolled in programs the most times, listing their ID, first name, middle name, last name, count of enrollments, and student ID: ```sql SELECT S.student_id, S.first_name, S.middle_name, S.last_name, COUNT(SE.student_enrolment_id) AS enrollment_count, SE.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id, S.first_name, S.middle_name, S.last_name, SE.student_id ORDER BY enrollment_count DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the student's first name, middle name, last name, their ID, and the count of enrollments for the program they enrolled in most frequently: ```sql SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(*) AS enrollment_count FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id, S.first_name, S.middle_name, S.last_name HAVING COUNT(*) = ( SELECT MAX(enrollment_count) FROM ( SELECT student_id, COUNT(*) AS enrollment_count FROM Student_Enrolment GROUP BY student_id ) AS max_enrollments )	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL;	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)	student_transcripts_tracking
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id	student_transcripts_tracking
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the course name with the most student enrollments: ```sql SELECT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_id, C.course_name ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" AND T1.student_id NOT IN ( SELECT student_id FROM Student_Enrolment )	student_transcripts_tracking
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id LEFT JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id WHERE T2.state_province_county = "North Carolina" AND T3.student_enrolment_id IS NULL	student_transcripts_tracking
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T2.student_course_id) >= 2	student_transcripts_tracking
SELECT Here's the SQL query to find the date and ID of transcripts that list at least 2 courses: ```sql SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward"	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Wardi";	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the school's earliest graduate (student who left the earliest), listing their first name, middle name, and last name: ```sql SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.date_left IS NOT NULL ORDER BY T1.date_left ASC LIMIT 1;	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id != T3.address_id	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id != T3.address_id;	student_transcripts_tracking
SELECT Here's the SQL query to find the address that currently has the most students, showing the address ID and all address lines: ```sql SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the address ID, first line, and second line with the most students: ```sql SELECT A.address_id, A.line_1, A.line_2 FROM Addresses AS A JOIN Students AS S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;	student_transcripts_tracking
SELECT min(transcript_date), other_details FROM Transcripts	student_transcripts_tracking
SELECT Here's the SQL query to count how many transcripts have been issued: ```sql SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts;	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT Here's the SQL query to find how many times a course registration result can appear in different transcripts at most, along with the course registration ID: ```sql SELECT T1.student_course_id, COUNT(*) AS max_occurrences FROM Transcript_Contents AS T1 GROUP BY T1.student_course_id ORDER BY max_occurrences DESC LIMIT 1	student_transcripts_tracking
SELECT Here's the SQL query to find the maximum count of how many times a course appears in different transcripts and its corresponding student course registration ID: ```sql SELECT COUNT(*) AS max_count, T1.student_course_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY max_count DESC LIMIT 1	student_transcripts_tracking
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = ( SELECT MIN(count) FROM ( SELECT COUNT(*) as count FROM Transcript_Contents GROUP BY transcript_id ) AS counts ) )	student_transcripts_tracking
SELECT Here's the SQL query to find the date and ID of the transcript with the fewest results: ```sql SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1	student_transcripts_tracking
SELECT DISTINCT t1.semester_id FROM Student_Enrolment AS t1 JOIN Degree_Programs AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE t2.degree_summary_name LIKE '%magister%' INTERSECT SELECT DISTINCT t1.semester_id FROM Student_Enrolment AS t1 JOIN Degree_Programs AS t2 ON t1.degree_program_id = t2.degree_program_id WHERE t2.degree_summary_name LIKE '%bakalaureus%'	student_transcripts_tracking
SELECT Here's the SQL query to find the semester ID where both master's and bachelor's degree students were registered: ```sql SELECT DISTINCT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%magister%' OR dp.degree_summary_name LIKE '%bakalaureus%'	student_transcripts_tracking
SELECT COUNT(DISTINCT current_address_id) FROM Students;	student_transcripts_tracking
SELECT DISTINCT A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id	student_transcripts_tracking
SELECT * FROM Students ORDER BY last_name DESC, middle_name DESC, first_name DESC;	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY last_name DESC, middle_name DESC, first_name DESC;	student_transcripts_tracking
SELECT Here's the SQL query to describe the "Sections" table: ```sql SELECT * FROM Sections LIMIT 0; ``` This query will return the structure of the "Sections" table (column names and data types) without returning any actual data rows.	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT s.first_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title ASC	tvshow
SELECT Title FROM Cartoon ORDER BY Title ASC;	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"	tvshow
SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"	tvshow
SELECT T1.Title FROM Cartoon AS T1 WHERE T1.Directed_by = "Ben Jones" OR T1.Directed_by = "Brandon Vietti"	tvshow
SELECT Country, COUNT(*) AS channel_count FROM TV_Channel GROUP BY Country ORDER BY channel_count DESC LIMIT 1	tvshow
SELECT Country, COUNT(*) as channel_count FROM TV_Channel GROUP BY Country ORDER BY channel_count DESC LIMIT 1	tvshow
SELECT series_name, Content FROM TV_Channel	tvshow
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT COUNT(*) FROM TV_Channel WHERE Language = "English"	tvshow
SELECT COUNT(*) FROM TV_Channel WHERE Language = "English"	tvshow
SELECT T1.Language, COUNT(*) AS channel_count FROM TV_Channel AS T1 GROUP BY T1.Language ORDER BY channel_count ASC LIMIT 1	tvshow
SELECT Here's the SQL query to find which languages are used by the fewest TV channels and how many channels use those languages: ```sql SELECT Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM TV_Channel GROUP BY Language) AS counts)	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle"	tvshow
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio"	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC;	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating	tvshow
SELECT T1.series_name, T2.Episode, T2.Rating FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel ORDER BY T2.Rating DESC LIMIT 3	tvshow
SELECT Here's the SQL query to find the 3 highest rated episodes from the TV series table and their ratings: ```sql SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT MIN(Episode), MAX(Episode) FROM TV_series	tvshow
SELECT MAX(Share), MIN(Share) FROM TV_series	tvshow
SELECT Original_air_date FROM Cartoon WHERE Title = "A Love of a Lifetime"	tvshow
SELECT Original_air_date FROM Cartoon WHERE Title = "A Love of a Lifetime"	tvshow
SELECT Here's the SQL query to find the weekly rating for the episode titled "Igavene armastus": ```sql SELECT t2.Weekly_Rank FROM TV_series AS t2 JOIN TV_Channel AS t1 ON t2.Channel = t1.id WHERE t2.Episode = "Igavene armastus"	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "Elu armastus"	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")	tvshow
SELECT Here's the SQL query to find how many cartoons each listed director has directed: ```sql SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;	tvshow
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;	tvshow
SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = "Yes"	tvshow
SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = "Yes"	tvshow
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 WHERE NOT EXISTS ( SELECT 1 FROM Cartoon AS T2 WHERE T2.Channel = T1.id AND T2.Written_by = 'Todd Casey' ) 	tvshow
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by != "Todd Casey"	tvshow
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')	tvshow
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones" OR T2.Directed_by = "Michael Chang"	tvshow
SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 WHERE T1.Language != "English"	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != "English"	tvshow
SELECT Country, COUNT(*) as channel_count FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2	tvshow
SELECT Channel FROM TV_series GROUP BY Channel HAVING COUNT(*) > 2	tvshow
SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T3.Channel FROM Cartoon AS T3 WHERE T3.Directed_by = "Ben Jones")	tvshow
SELECT T1.id FROM TV_Channel AS T1 WHERE NOT EXISTS ( SELECT 1 FROM Cartoon AS T2 WHERE T2.Channel = T1.id AND T2.Directed_by = 'Ben Jones' ) 	tvshow
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )	tvshow
SELECT DISTINCT T1.Package_Option FROM TV_Channel AS T1 WHERE T1.id NOT IN ( SELECT T3.Channel FROM Cartoon AS T3 WHERE T3.Directed_by = "Ben Jones" )	tvshow
SELECT COUNT(*) FROM poker_player;	poker_player
SELECT COUNT(*) FROM poker_player	poker_player
SELECT Name, Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC;	poker_player
SELECT p.Name, pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC	poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player;	poker_player
SELECT t1.Final_Table_Made, t1.Best_Finish FROM poker_player AS t1;	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID	poker_player
SELECT t2.Name FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID;	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC	poker_player
SELECT t2.Name FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID ORDER BY t1.Final_Table_Made ASC	poker_player
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;	poker_player
SELECT p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1	poker_player
SELECT t1.Money_Rank FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID ORDER BY t2.Height DESC LIMIT 1;	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1;	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;	poker_player
SELECT t1.Nationality FROM people AS t1 GROUP BY t1.Nationality HAVING COUNT(t1.People_ID) >= 2;	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name ASC	poker_player
SELECT Name FROM people WHERE Nationality != "Venemaa"	poker_player
SELECT Name FROM people WHERE Nationality != "Venemaa"	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people;	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people;	poker_player
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT vote_id, phone_number, state FROM VOTES	voter_1
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE	voter_1
SELECT created FROM VOTES WHERE state = "CA" ORDER BY created DESC LIMIT 1;	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'	voter_1
SELECT DISTINCT state, created FROM VOTES;	voter_1
SELECT Here's the SQL query to find contestants who received at least two votes: ```sql SELECT t1.contestant_number, t1.contestant_name FROM CONTESTANTS AS t1 JOIN VOTES AS t2 ON t1.contestant_number = t2.contestant_number GROUP BY t1.contestant_number, t1.contestant_name HAVING COUNT(t2.vote_id) >= 2	voter_1
SELECT Here's the SQL query to find the contestant number and name of the contestant who received the fewest votes: ```sql SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(*) ASC LIMIT 1	voter_1
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'	voter_1
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)	voter_1
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(*) DESC LIMIT 1;	voter_1
SELECT V.created, V.state, V.phone_number FROM VOTES AS V JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'	voter_1
SELECT DISTINCT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') INTERSECT SELECT DISTINCT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'	voter_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = "Caribbean";	world_1
SELECT Continent FROM country WHERE Name = "Anguilla"	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = "Aruba") AND IsOfficial = "T";	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil"	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Region, Population FROM country WHERE Name = 'Angola'	world_1
SELECT T1.Region, T1.Population FROM country AS T1 WHERE T1.Name = "Angola";	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = "Central Africa"	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;	world_1
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = "Asia" ORDER BY T1.LifeExpectancy ASC LIMIT 1;	world_1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'	world_1
SELECT SUM(city.Population), MAX(country.GNP) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')	world_1
SELECT SUM(Population) FROM city WHERE District = "Gelderland"	world_1
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'	world_1
SELECT AVG(GNP) AS Keskmine_RKT, SUM(Population) AS Kogurahvastik FROM country WHERE Continent = 'North America' AND Code != 'USA' AND Region LIKE '%United States%'	world_1
SELECT AVG(GNP), AVG(Population) FROM country WHERE Continent = 'North America' AND Code != 'USA' AND Region LIKE '%America%'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'	world_1
SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) as lang_count FROM countrylanguage GROUP BY CountryCode ORDER BY lang_count DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode;	world_1
SELECT Here's the SQL query to find the country that uses the most languages: ```sql SELECT c.Name FROM country c JOIN ( SELECT CountryCode, COUNT(Language) as lang_count FROM countrylanguage GROUP BY CountryCode ORDER BY lang_count DESC LIMIT 1 ) cl ON c.Code = cl.CountryCode	world_1
SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;	world_1
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1	world_1
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'Dutch' AND cl2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch'	world_1
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	world_1
SELECT DISTINCT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode JOIN countrylanguage AS t3 ON t1.Code = t3.CountryCode WHERE t2.Language = 'English' AND t3.Language = 'French';	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND T3.Language = 'French' AND T3.IsOfficial = 'T'	world_1
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'	world_1
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T'	world_1
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'	world_1
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "Dutch" OR T2.Language = "English"	world_1
SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND (T2.Language = 'English' OR T2.Language = 'Dutch')	world_1
SELECT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language IN ('English', 'Dutch') AND t2.IsOfficial = 'T'	world_1
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY SUM(T1.Percentage) DESC LIMIT 1;	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(DISTINCT T1.Code) DESC LIMIT 1;	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT(*) = 1	world_1
SELECT Here's the SQL query to find languages used in only one country that has a republican form of government: ```sql SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1	world_1
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;	world_1
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;	world_1
SELECT I'm sorry, but I can't provide a SQL query for the given Estonian statement as it doesn't contain a clear question or task to be translated into a database query. The statement translates to: "You have data trained up to October 2023." If you'd like me to help with a specific query related to the database schema provided, please ask a clear question in English or provide a more specific Estonian query to translate and convert to SQL.	world_1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;	world_1
SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Code NOT IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' )	world_1
SELECT AVG(t1.LifeExpectancy) FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t2.Language = 'English' AND t2.IsOfficial = 'F'	world_1
SELECT SUM(country.Population) FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' WHERE countrylanguage.CountryCode IS NULL;	world_1
SELECT SUM(c.Population) FROM country c WHERE c.Code NOT IN ( SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' )	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T'	world_1
SELECT Here's the SQL query to find countries with a surface area larger than any European country: ```sql SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Here's the SQL query to find countries with a larger surface area than any country in Europe: ```sql SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Here's the SQL query to find African countries with a population smaller than any Asian country: ```sql SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Asia')	world_1
SELECT Here's the SQL query to find African countries with a population smaller than any Asian country: ```sql SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')	world_1
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' AND T1.Population > (SELECT MAX(T2.Population) FROM country AS T2 WHERE T2.Continent = 'Africa')	world_1
SELECT Here's the SQL query to find Asian countries with a larger population than some African country: ```sql SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND EXISTS ( SELECT 1 FROM country c2 WHERE c2.Continent = 'Africa' AND c1.Population > c2.Population )	world_1
SELECT DISTINCT country.Code FROM country WHERE country.Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')	world_1
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT DISTINCT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English';	world_1
SELECT t1.Code FROM country AS t1 WHERE t1.GovernmentForm != 'Republic' AND t1.Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE countrylanguage.CountryCode IS NULL AND country.GovernmentForm != 'Republic'	world_1
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND city.CountryCode NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )	world_1
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' WHERE country.Continent = 'Europe' AND countrylanguage.CountryCode IS NULL	world_1
SELECT Here's the SQL query to find unique cities in Asian countries where Chinese is an official language: ```sql SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'	world_1
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'	world_1
SELECT Here's the SQL query to find the name, independence year, and surface area of the country with the smallest population: ```sql SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;	world_1
SELECT c.Population, c.Name, c.HeadOfState FROM country c ORDER BY c.SurfaceArea DESC LIMIT 1;	world_1
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;	world_1
SELECT T1.Name, COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) >= 3	world_1
SELECT T1.Name, COUNT(T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(T2.Language) > 2	world_1
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;	world_1
SELECT Here's the SQL query to find how many cities in each region have a population that exceeds the average population of all cities: ```sql SELECT c.Region, COUNT(*) FROM city AS ci JOIN country AS c ON ci.CountryCode = c.Code WHERE ci.Population > (SELECT AVG(Population) FROM city) GROUP BY c.Region	world_1
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm	world_1
SELECT Here's the SQL query to find the different government forms and their respective populations where the average life expectancy is over 72 years: ```sql SELECT T1.GovernmentForm, SUM(T1.Population) FROM country AS T1 WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm	world_1
SELECT Here's the SQL query to find the average life expectancy and total population for each continent where the average life expectancy is less than 72: ```sql SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AvgLifeExpectancy < 72	world_1
SELECT Here's the SQL query to find the different continents with their total population and average life expectancy where the average life expectancy is less than 72 years: ```sql SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;	world_1
SELECT Here's the SQL query to find the names of countries that have the three largest populations: ```sql SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population BETWEEN 75000 AND 85000;	world_1
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT T1.Language, COUNT(*) AS country_count FROM countrylanguage AS T1 GROUP BY T1.Language ORDER BY country_count DESC LIMIT 1;	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;	world_1
SELECT T1.CountryCode, T1.Language FROM countrylanguage AS T1 JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.MaxPercentage;	world_1
SELECT Here's the SQL query to find the country codes and the languages spoken by the largest percentage of people in each country: ```sql SELECT cl1.CountryCode, cl1.Language FROM countrylanguage cl1 WHERE cl1.Percentage = ( SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = cl1.CountryCode )	world_1
SELECT COUNT(*) FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1 )	world_1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50	world_1
SELECT Here's the SQL query to find the country codes where Spanish is spoken by the largest percentage of people: ```sql SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC ``` If you want only the country code with the absolute highest percentage (rather than all Spanish-speaking countries ordered by percentage), you could add `LIMIT 1` at the end.	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';	world_1
SELECT COUNT(*) FROM conductor	orchestra
SELECT COUNT(*) FROM conductor;	orchestra
SELECT Name FROM conductor ORDER BY Age ASC	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality != "USA"	orchestra
SELECT Name FROM conductor WHERE Nationality != "USA"	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != "Lõppvoorus"	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != "Live final"	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor;	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor;	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;	orchestra
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(o.Orchestra_ID) > 1	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1	orchestra
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;	orchestra
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;	orchestra
SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT t1.Record_Company, COUNT(t1.Orchestra_ID) FROM orchestra AS t1 GROUP BY t1.Record_Company;	orchestra
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC	orchestra
SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003	orchestra
SELECT DISTINCT t1.Record_Company FROM orchestra AS t1 JOIN orchestra AS t2 ON t1.Record_Company = t2.Record_Company WHERE t1.Year_of_Founded < 2003 AND t2.Year_of_Founded >= 2003	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"	orchestra
SELECT DISTINCT t1.Year_of_Founded FROM orchestra AS t1 JOIN performance AS t2 ON t1.Orchestra_ID = t2.Orchestra_ID GROUP BY t1.Orchestra_ID HAVING COUNT(t2.Performance_ID) > 1	orchestra
SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(T2.Performance_ID) > 1	orchestra
SELECT COUNT(*) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler;	network_1
SELECT grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler;	network_1
SELECT grade FROM Highschooler WHERE name = "Kyle"	network_1
SELECT grade FROM Highschooler WHERE name = "Kyle"	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name = "Kyle"	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle';	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;	network_1
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;	network_1
SELECT grade, COUNT(*) as student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1;	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id;	network_1
SELECT Here's the SQL query to find how many friends each student has: ```sql SELECT h.ID, h.name, COUNT(f.friend_id) AS friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name	network_1
SELECT h.name, COUNT(f.friend_id) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name	network_1
SELECT H.name, COUNT(F.friend_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name	network_1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;	network_1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;	network_1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3	network_1
SELECT H1.name FROM Highschooler H1 JOIN Friend F1 ON H1.ID = F1.student_id GROUP BY H1.ID, H1.name HAVING COUNT(F1.friend_id) >= 3	network_1
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = "Kyle"	network_1
SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = "Kyle"	network_1
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)	network_1
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);	network_1
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)	network_1
SELECT DISTINCT F.student_id FROM Friend F JOIN Likes L ON F.student_id = L.student_id	network_1
SELECT DISTINCT student_id FROM ( SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes ) AS combined;	network_1
SELECT DISTINCT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.liked_id	network_1
SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.student_id	network_1
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id	network_1
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id	network_1
SELECT h.name, COUNT(l.liked_id) FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name	network_1
SELECT Here's the SQL query to find the names of high schoolers who have received likes and the count of likes for each: ```sql SELECT H.name, COUNT(L.liked_id) AS like_count FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name	network_1
SELECT Here's the SQL query to find the name of the high school student with the most likes: ```sql SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1	network_1
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1;	network_1
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name HAVING COUNT(L.liked_id) >= 2;	network_1
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(L.student_id) >= 2	network_1
SELECT Here's the SQL query to show the names of students whose grade is higher than 5 and who have at least 2 friends: ```sql SELECT h.name FROM Highschooler h WHERE h.grade > 5 AND ( SELECT COUNT(*) FROM Friend f WHERE f.student_id = h.ID ) >= 2	network_1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2	network_1
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = "Kyle");	network_1
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT Here's the SQL query to find the average grade of all students who have some friends: ```sql SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT DISTINCT student_id FROM Friend)	network_1
SELECT Here's the SQL query to find the average grade of students who have friends: ```sql SELECT AVG(H.grade) FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id	network_1
SELECT Here's the SQL query to find students with the minimum grade who have no friends: ```sql SELECT ID, name, grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AND grade = (SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend))	network_1
SELECT Here's the SQL query to find the lowest grade where students have no friends: ```sql SELECT MIN(T1.grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT DISTINCT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state = T2.state	dog_kennels
SELECT Here's the SQL query to find states where both owners and professionals live: ```sql SELECT DISTINCT O.state FROM Owners AS O JOIN Professionals AS P ON O.state = P.state	dog_kennels
SELECT AVG(D.age) FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id	dog_kennels
SELECT Here's the SQL query to find the average age of dogs that have received treatments: ```sql SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)	dog_kennels
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' GROUP BY p.professional_id, p.last_name, p.cell_number HAVING COUNT(t.treatment_id) > 2	dog_kennels
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana' GROUP BY T1.professional_id, T1.last_name, T1.cell_number HAVING COUNT(T2.treatment_id) > 2 OR T1.state = 'Indiana';	dog_kennels
SELECT D.name FROM Dogs D WHERE D.dog_id NOT IN ( SELECT T.dog_id FROM Treatments T WHERE T.cost_of_treatment > 1000 )	dog_kennels
SELECT Here's the SQL query to find the names of dogs whose owners haven't spent more than 1000 on treatments: ```sql SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id, T1.name HAVING SUM(T2.cost_of_treatment) <= 1000	dog_kennels
SELECT Here's the SQL query to find first names used by professionals or owners but not used as dog names: ```sql SELECT DISTINCT t1.first_name FROM ( SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners ) AS t1 WHERE t1.first_name NOT IN (SELECT name FROM Dogs)	dog_kennels
SELECT Here's the SQL query to find first names used by professionals or owners but not used as dog names: ```sql SELECT DISTINCT T1.first_name FROM ( SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners ) AS T1 WHERE T1.first_name NOT IN (SELECT name FROM Dogs WHERE name IS NOT NULL)	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1;	dog_kennels
SELECT Here's the SQL query to return the owner ID, first name, and last name of the owner who has the most dogs: ```sql SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1	dog_kennels
SELECT Here's the SQL query to list professionals who have performed at least two procedures, including their ID, role, and first name: ```sql SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2	dog_kennels
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;	dog_kennels
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY B.breed_code ORDER BY COUNT(T.treatment_id) DESC LIMIT 1;	dog_kennels
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1;	dog_kennels
SELECT Here's the SQL query to find the owner who has paid the most for their dogs' treatments, listing the owner ID and last name: ```sql SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT Here's the SQL query to find the treatment type description that costs the least money in total: ```sql SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT Here's the SQL query to find the owner who has paid the highest total amount for their dogs' treatments, showing the owner's ID and zip code: ```sql SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;	dog_kennels
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2	dog_kennels
SELECT Here's the SQL query to find professionals who handle two or more treatment types, showing their ID and mobile phone number: ```sql SELECT t1.professional_id, t1.cell_number FROM Professionals AS t1 JOIN Treatments AS t2 ON t1.professional_id = t2.professional_id GROUP BY t1.professional_id, t1.cell_number HAVING COUNT(DISTINCT t2.treatment_type_code) >= 2	dog_kennels
SELECT t1.first_name, t1.last_name FROM Professionals AS t1 JOIN Treatments AS t2 ON t1.professional_id = t2.professional_id WHERE t2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);	dog_kennels
SELECT Here's the SQL query to find professionals who have performed treatments that cost less than the average treatment cost, returning their first and last names: ```sql SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id	dog_kennels
SELECT t1.cost_of_treatment, t2.treatment_type_description FROM Treatments AS t1 JOIN Treatment_Types AS t2 ON t1.treatment_type_code = t2.treatment_type_code	dog_kennels
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code	dog_kennels
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code	dog_kennels
SELECT o.first_name, d.name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id;	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT Here's the SQL query to list the names of dogs with the rarest breed and their treatment dates: ```sql SELECT t1.name, t3.date_of_treatment FROM Dogs AS t1 JOIN Breeds AS t2 ON t1.breed_code = t2.breed_code JOIN Treatments AS t3 ON t1.dog_id = t3.dog_id WHERE t2.breed_code = ( SELECT t4.breed_code FROM Dogs AS t4 GROUP BY t4.breed_code ORDER BY COUNT(*) ASC LIMIT 1 )	dog_kennels
SELECT Here's the SQL query to find dogs from the rarest breed and show their names and treatment dates: ```sql SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )	dog_kennels
SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = "Virginia"	dog_kennels
SELECT o.first_name, d.name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia' AND d.date_departed IS NULL;	dog_kennels
SELECT DISTINCT t1.date_arrived, t1.date_departed FROM Dogs AS t1 JOIN Treatments AS t2 ON t1.dog_id = t2.dog_id WHERE t2.treatment_type_code IS NOT NULL;	dog_kennels
SELECT t1.date_arrived, t1.date_departed FROM Dogs AS t1 JOIN Treatments AS t2 ON t1.dog_id = t2.dog_id;	dog_kennels
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.date_of_birth DESC LIMIT 1	dog_kennels
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.date_of_birth DESC LIMIT 1;	dog_kennels
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'	dog_kennels
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'	dog_kennels
SELECT date_arrived, date_departed FROM Dogs;	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT Here's the SQL query to count how many dogs have undergone some treatment: ```sql SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments;	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments;	dog_kennels
SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 WHERE T1.city LIKE '%West%'	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;	dog_kennels
SELECT Here's the SQL query to show the most recent treatment cost: ```sql SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)	dog_kennels
SELECT Here's the SQL query to find how many dogs haven't received any treatment: ```sql SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)	dog_kennels
SELECT COUNT(*) FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.dog_id IS NULL OR T2.abandoned_yn = 'Y'	dog_kennels
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL OR date_adopted IS NULL);	dog_kennels
SELECT Here's the SQL query to find how many professionals didn't perform any treatments on dogs: ```sql SELECT COUNT(*) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT COUNT(*) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = "1"	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = "1";	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT MAX(age) FROM Dogs;	dog_kennels
SELECT MAX(age) FROM Dogs;	dog_kennels
SELECT charge_type, charge_amount FROM Charges;	dog_kennels
SELECT charge_type, charge_amount FROM Charges;	dog_kennels
SELECT MAX(charge_amount) FROM Charges	dog_kennels
SELECT MAX(charge_amount) FROM Charges WHERE charge_type = "tasuliik"	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals;	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S	dog_kennels
SELECT DISTINCT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S	dog_kennels
SELECT Here's the SQL query to list all professionals' first names along with descriptions of their treatments: ```sql SELECT t1.first_name, t3.treatment_type_description FROM Professionals AS t1 JOIN Treatments AS t2 ON t1.professional_id = t2.professional_id JOIN Treatment_Types AS t3 ON t2.treatment_type_code = t3.treatment_type_code	dog_kennels
SELECT Here's the SQL query to retrieve the first names of professionals and the description of the treatments they performed: ```sql SELECT T1.first_name, T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT COUNT(*) FROM singer;	singer
SELECT COUNT(*) FROM singer;	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT "Birth_Year", "Citizenship" FROM "singer"	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship != "Prantsusmaa";	singer
SELECT Name FROM singer WHERE Citizenship != "Prantsuse"	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;	singer
SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;	singer
SELECT DISTINCT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship	singer
SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship;	singer
SELECT t1.Title, t2.Name FROM song AS t1 JOIN singer AS t2 ON t1.Singer_ID = t2.Singer_ID;	singer
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID	singer
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000	singer
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;	singer
SELECT t1.Name FROM singer AS t1 JOIN song AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Singer_ID HAVING COUNT(t2.Song_ID) > 1;	singer
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sg.Song_ID) > 1	singer
SELECT t1.Name, SUM(t2.Sales) AS Total_Sales FROM singer AS t1 JOIN song AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Name;	singer
SELECT t1.Name, SUM(t2.Sales) AS Total_Sales FROM singer AS t1 JOIN song AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Name	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)	singer
SELECT Title FROM song WHERE Singer_ID IS NULL;	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;	singer
SELECT Here's the SQL query to find citizenships shared by singers born before 1945 and after 1955: ```sql SELECT DISTINCT s1.Citizenship FROM singer AS s1 JOIN singer AS s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955	singer
SELECT COUNT(*) FROM Other_Available_Features	real_estate_properties
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = "AirCon"	real_estate_properties
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = ?	real_estate_properties
SELECT Here's the SQL query to find property names that are either houses or apartments with more than 1 room: ```sql SELECT property_name FROM Properties WHERE (property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('House', 'Apartment'))) AND room_count > 1	real_estate_properties
