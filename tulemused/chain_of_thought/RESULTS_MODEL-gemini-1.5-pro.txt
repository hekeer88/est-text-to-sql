SELECT count(*) FROM singer	concert_singer
SELECT COUNT(*) FROM singer	concert_singer
SELECT Name , Country , Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name , Country , Age FROM singer ORDER BY Age DESC	concert_singer
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = "France"	concert_singer
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = "France"	concert_singer
SELECT Song_Name , Song_release_year FROM singer ORDER BY Age LIMIT 1	concert_singer
SELECT Song_Name , Song_release_year FROM singer ORDER BY Age LIMIT 1	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT Country , COUNT(*) FROM singer GROUP BY Country	concert_singer
SELECT Country , COUNT(*) FROM singer GROUP BY Country	concert_singer
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)	concert_singer
SELECT Song_Name FROM singer WHERE Age > (SELECT avg(Age) FROM singer)	concert_singer
SELECT Location , Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT Location , Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity), AVG(Capacity) FROM stadium	concert_singer
SELECT AVG(Capacity), MAX(Capacity) FROM stadium	concert_singer
SELECT Name , Capacity FROM stadium ORDER BY Average DESC LIMIT 1	concert_singer
SELECT Name , Capacity FROM stadium ORDER BY Average DESC LIMIT 1	concert_singer
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015	concert_singer
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015	concert_singer
SELECT T1.Name , count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID	concert_singer
SELECT T1.Stadium_ID , count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID	concert_singer
SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY count(*) DESC LIMIT 1	concert_singer
SELECT t1.Name , t1.Capacity FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year >= 2013 GROUP BY t1.Stadium_ID ORDER BY count(*) DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T2.Name FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T2.Name FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID	concert_singer
SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T2.Name FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014	concert_singer
SELECT T1.concert_Name , T1.Theme , COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID	concert_singer
SELECT T1.concert_Name , T1.Theme , count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID	concert_singer
SELECT t1.Name , COUNT(t2.concert_ID) FROM singer AS t1 JOIN singer_in_concert AS t2 ON t1.Singer_ID = t2.Singer_ID GROUP BY t1.Name	concert_singer
SELECT T1.Name , count(*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	concert_singer
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T3 ON T1.concert_ID = T3.concert_ID JOIN singer AS T2 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Year = 2014	concert_singer
SELECT T2.Name FROM singer AS T2 JOIN singer_in_concert AS T1 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T3.concert_ID = T1.concert_ID WHERE T3.Year = 2014	concert_singer
SELECT Name , Country FROM singer WHERE Song_Name LIKE "%Hey%"	concert_singer
SELECT Name , Country FROM singer WHERE Song_Name LIKE "%Hey%"	concert_singer
SELECT T1.Name , T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name , T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015	concert_singer
SELECT T1.Name , T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 UNION SELECT T1.Name , T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	concert_singer
SELECT COUNT(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity = (SELECT max(Capacity) FROM stadium)	concert_singer
SELECT count(*) FROM Pets WHERE weight > 10	pets_1
SELECT count(*) FROM Pets WHERE weight > 10	pets_1
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT min(weight) FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType	pets_1
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType	pets_1
SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.Age > 20	pets_1
SELECT COUNT(PetID) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age >= 20	pets_1
SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'	pets_1
SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog' AND T1.Sex = 'F'	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT T2.Fname FROM Student AS T2 JOIN Has_Pet AS T1 ON T2.StuID = T1.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T3.PetType = "Cat" OR T3.PetType = "Dog"	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' OR T3.PetType = 'Dog'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog'	pets_1
SELECT Major, Age FROM Student EXCEPT SELECT Major, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat'	pets_1
SELECT Major, Age FROM Student EXCEPT SELECT Major, Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"	pets_1
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'Cat'	pets_1
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType='Kass')	pets_1
SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog' EXCEPT SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Dog' EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat'	pets_1
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT PetType , weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT PetID , weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetID, weight FROM Pets WHERE pet_age > 1	pets_1
SELECT AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType	pets_1
SELECT avg(pet_age) , max(pet_age) , PetType FROM Pets GROUP BY PetType	pets_1
SELECT AVG(weight), PetType FROM Pets GROUP BY PetType	pets_1
SELECT PetType , avg(weight) FROM Pets GROUP BY PetType	pets_1
SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT T1.Fname , T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'	pets_1
SELECT PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'	pets_1
SELECT StuID, COUNT(*) AS PetCount FROM Has_Pet GROUP BY StuID	pets_1
SELECT T1.StuID , COUNT(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID	pets_1
SELECT T1.Fname , T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING count(*) > 1	pets_1
SELECT T2.Fname , T2.Sex FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING count(*) > 1	pets_1
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'Cat' AND T3.pet_age = 3	pets_1
SELECT T2.LName FROM Student AS T2 JOIN Has_Pet AS T1 ON T2.StuID = T1.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T3.PetType = 'Kass' AND T3.pet_age = 3	pets_1
SELECT AVG(Age) FROM Student EXCEPT SELECT AVG(T1.Age) FROM Student AS T1 JOIN Has_pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT avg(T1.Age) FROM Student AS T1 EXCEPT SELECT T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT COUNT(DISTINCT Continent) FROM continents	car_1
SELECT COUNT(DISTINCT Continent) FROM continents	car_1
SELECT ContId, Continent, COUNT(CountryId) AS CountryCount FROM continents LEFT JOIN countries ON ContId = Continent GROUP BY ContId, Continent	car_1
SELECT T1.ContId , T1.Continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId	car_1
SELECT COUNT(DISTINCT CountryName) FROM countries	car_1
SELECT COUNT(*) FROM countries	car_1
SELECT T2.FullName , T2.Id , COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.Id	car_1
SELECT T2.FullName , T2.Id , COUNT(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName , T2.Id	car_1
SELECT Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower ASC LIMIT 1	car_1
SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data ORDER BY Horsepower ASC LIMIT 1)	car_1
SELECT Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM cars_data)	car_1
SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))	car_1
SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T3.Model = T2.Model JOIN cars_data AS T4 ON T4.Id = T3.MakeId WHERE T4.Year = 1970	car_1
SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)))	car_1
SELECT Make, Year FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data)	car_1
SELECT t1.Maker, t2.Year FROM car_makers AS t1 JOIN cars_data AS t2 ON t1.Id = t2.Id ORDER BY t2.Year LIMIT 1	car_1
SELECT DISTINCT Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980	car_1
SELECT DISTINCT Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980	car_1
SELECT T1.Continent , COUNT(T2.Maker) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T3.Country = T2.CountryId GROUP BY T1.Continent	car_1
SELECT Continent, COUNT(car_makers.Id) AS Number_of_Makers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY Continent	car_1
SELECT CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country ORDER BY COUNT(T2.Maker) DESC LIMIT 1	car_1
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country ORDER BY COUNT(*) DESC LIMIT 1	car_1
SELECT COUNT(T2.Model), T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName	car_1
SELECT COUNT(T2.Model), T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName	car_1
SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T2.Make = 'AMC' AND T3.Model = 'Hornet Sportabout (SW)'	car_1
SELECT Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'Hornet Sportabout (sw)'	car_1
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'France')	car_1
SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';	car_1
SELECT COUNT(DISTINCT t1.Model) FROM model_list AS t1 JOIN car_makers AS t2 ON t1.Maker = t2.Id JOIN countries AS t3 ON t2.Country = t3.CountryId WHERE t3.CountryName = "USA"	car_1
SELECT COUNT(DISTINCT T1.Model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id INNER JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA'	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4	car_1
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8	car_1
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8	car_1
SELECT Maker, Model FROM model_list	car_1
SELECT Maker, Model FROM car_names	car_1
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)	car_1
SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT count(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT `Year`, AVG(`Weight`) FROM cars_data GROUP BY `Year`	car_1
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year	car_1
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3	car_1
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN continents AS T3 ON T1.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.Country HAVING count(*) >= 3	car_1
SELECT MAX(Horsepower), Maker FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3	car_1
SELECT Horsepower, Make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1	car_1
SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY AVG(T3.MPG) DESC LIMIT 1	car_1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(CAST(REPLACE(Horsepower, '?', '0') AS REAL)) FROM cars_data WHERE Year < 1980	car_1
SELECT AVG(Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = "Volvo"	car_1
SELECT AVG(Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'Volvo'	car_1
SELECT max(Accelerate) , Cylinders FROM cars_data GROUP BY Cylinders	car_1
SELECT max(Accelerate) , Cylinders FROM cars_data GROUP BY Cylinders	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY count(*) DESC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	car_1
SELECT count(*) FROM cars_data WHERE Year = 1980	car_1
SELECT count(*) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = "American Motor Company"	car_1
SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = "American Motor Company"	car_1
SELECT FullName, Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker HAVING count(*) > 3	car_1
SELECT T1.Maker, T1.Id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING count(T2.Model) > 3	car_1
SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "General Motors" UNION SELECT Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight > 3500	car_1
SELECT Model FROM car_names WHERE Make = "General Motors" UNION SELECT Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight > 3500	car_1
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000	car_1
SELECT DISTINCT year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE Weight > 3000	car_1
SELECT T1.Horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Volvo' ORDER BY T1.Accelerate ASC LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'Volvo'))) ORDER BY Accelerate ASC LIMIT 1	car_1
SELECT count(*) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1 )	car_1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1 )	car_1
SELECT COUNT(Country) FROM car_makers GROUP BY Country HAVING COUNT(Maker) > 2	car_1
SELECT COUNT(Country) FROM car_makers GROUP BY Country HAVING COUNT(Maker) > 2	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6	car_1
SELECT COUNT(*) FROM cars_data WHERE Cylinders = 6	car_1
SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC) LIMIT 1	car_1
SELECT Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1	car_1
SELECT T1.Make, T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > ( SELECT MIN(Horsepower) FROM cars_data ) AND T2.Cylinders <= 3	car_1
SELECT T1.Id , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Horsepower = "" AND T4.Cylinders < 4	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980	car_1
SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T3.Id = T1.ModelId WHERE T3.Weight < 3500 EXCEPT SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'Ford Motor Company'	car_1
SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T3.Id = T1.ModelId WHERE T3.Weight < 3500 EXCEPT SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = "Ford Motor Company"	car_1
SELECT CountryName FROM countries EXCEPT SELECT Country FROM car_makers	car_1
SELECT CountryName FROM countries EXCEPT SELECT Country FROM car_makers	car_1
SELECT Maker, COUNT(*) AS ModelCount FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2 INTERSECT SELECT Maker, COUNT(Maker) FROM model_list GROUP BY Maker HAVING COUNT(Maker) > 3	car_1
SELECT T1.Id , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING COUNT(DISTINCT T2.Model) >= 2 INTERSECT SELECT T3.Maker , T3.FullName FROM car_makers AS T3 JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.Model = T5.Model GROUP BY T3.Maker HAVING count(*) > 3	car_1
SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING count(*) > 3 UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = 'fiat'	car_1
SELECT CountryId , CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country HAVING count(*) > 3 UNION SELECT T1.CountryId , T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker = 'Fiat'	car_1
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Country FROM airlines WHERE Airline = "Jetblue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = "Jetblue Airways"	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT AirportCode , AirportName FROM airports WHERE City = "Anthony"	flight_2
SELECT AirportCode , AirportName FROM airports WHERE City = "Anthony"	flight_2
SELECT COUNT(*) FROM airlines	flight_2
SELECT count(*) FROM airlines	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM airports	flight_2
SELECT COUNT(*) FROM Flights	flight_2
SELECT COUNT(*) FROM Flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT count(*) FROM airlines WHERE Country = "USA"	flight_2
SELECT count(*) FROM airlines WHERE country = 'USA'	flight_2
SELECT City, Country FROM airports WHERE AirportName = "Alton"	flight_2
SELECT AirportName FROM airports WHERE City = 'Alton' AND Country = 'USA'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT count(*) FROM flights WHERE SourceAirport = "APG"	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT count(*) FROM flights WHERE DestAirport = "ATO"	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ'	flight_2
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABZ'	flight_2
SELECT COUNT(*) FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport WHERE t1.City = "Aberdeen"	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ'	flight_2
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.city = 'Aberdeen' AND T3.city = 'Ashley'	flight_2
SELECT COUNT(*) FROM Flights WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASY'	flight_2
SELECT count(*) FROM airlines AS t1 JOIN flights AS t2 ON t1.uid = t2.Airline WHERE t1.Airline = 'JetBlue Airways'	flight_2
SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = "Jetblue Airways"	flight_2
SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'	flight_2
SELECT count(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')	flight_2
SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'	flight_2
SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD'	flight_2
SELECT count(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	flight_2
SELECT count(*) FROM flights AS f JOIN airlines AS al ON f.Airline = al.uid WHERE al.Airline = "United Airlines" AND f.DestAirport IN (SELECT AirportCode FROM airports WHERE City = "Aberdeen")	flight_2
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) ASC LIMIT 1	flight_2
SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1	flight_2
SELECT T1.Abbreviation , T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY count(*) ASC LIMIT 1	flight_2
SELECT T1.Airline, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY count(*) ASC LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'	flight_2
SELECT Airline FROM flights WHERE DestAirport = 'AHD'	flight_2
SELECT T1.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'CVO'	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'CVO'	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT T1.Airline FROM flights AS T1 GROUP BY T1.Airline HAVING count(*) >= 10	flight_2
SELECT T1.Airline FROM flights AS T1 GROUP BY T1.Airline HAVING count(*) >= 10	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200	flight_2
SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200	flight_2
SELECT FlightNo FROM flights WHERE Airline = ( SELECT uid FROM airlines WHERE Airline = "United Airlines" )	flight_2
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = "APG"	flight_2
SELECT FlightNo FROM Flights WHERE SourceAirport = "APG"	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = "APG"	flight_2
SELECT FlightNo FROM Flights WHERE DestAirport = "APG"	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = "ABR"	flight_2
SELECT T1.FlightNo FROM Flights AS T1 JOIN Airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = "Aberdeen"	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = ( SELECT AirportCode FROM airports WHERE City = "Aberdeen" )	flight_2
SELECT FlightNo FROM Flights WHERE DestAirport = (SELECT AirportCode FROM Airports WHERE City = 'Aberdeen')	flight_2
SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = "Aberdeen" OR T2.City = "Abilene"	flight_2
SELECT count(*) FROM flights WHERE destairport = "ABR" OR destairport = "ABI"	flight_2
SELECT AirportName FROM airports EXCEPT SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport EXCEPT SELECT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport	flight_2
SELECT AirportCode FROM airports EXCEPT SELECT SourceAirport FROM flights EXCEPT SELECT DestAirport FROM flights	flight_2
SELECT count(*) FROM employee	employee_hire_evaluation
SELECT COUNT(*) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT COUNT(*) , City FROM employee GROUP BY City	employee_hire_evaluation
SELECT COUNT(*) , City FROM employee GROUP BY City	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1	employee_hire_evaluation
SELECT COUNT(*) , Location FROM shop GROUP BY Location	employee_hire_evaluation
SELECT COUNT(Shop_ID), Location FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Manager_name , District FROM shop ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT MAX(Number_products), MIN(Number_products) from shop	employee_hire_evaluation
SELECT min(Number_products), max(Number_products) from shop	employee_hire_evaluation
SELECT Name , Location , District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)	employee_hire_evaluation
SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1	employee_hire_evaluation
SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1)	employee_hire_evaluation
SELECT Name FROM employee EXCEPT SELECT Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID	employee_hire_evaluation
SELECT Name FROM employee EXCEPT SELECT Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID	employee_hire_evaluation
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY count(*) DESC LIMIT 1	employee_hire_evaluation
SELECT t2.Name FROM hiring AS t1 JOIN shop AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Shop_ID ORDER BY count(*) DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM shop EXCEPT SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID	employee_hire_evaluation
SELECT Name FROM shop EXCEPT SELECT T2.Name FROM employee AS T1 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID JOIN shop AS T2 ON T3.Shop_ID = T2.Shop_ID	employee_hire_evaluation
SELECT s.Name , COUNT(h.Employee_ID) FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name	employee_hire_evaluation
SELECT COUNT(T2.Employee_ID) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID , Document_Name , Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID , Document_Name , Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description LIKE "%w%"	cre_Doc_Template_Mgt
SELECT Document_Name , Template_ID FROM Documents WHERE Document_Description LIKE "%w%"	cre_Doc_Template_Mgt
SELECT Document_ID , Template_ID , Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV"	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Template_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Document_ID) FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T1.Template_Type_Code = "PPT"	cre_Doc_Template_Mgt
SELECT Template_ID , count(*) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID , count(*) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING count(*) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING count(*) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP" OR Template_Type_Code = "PPT"	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = "PP" OR Template_Type_Code = "PPT"	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Description = 'CV'	cre_Doc_Template_Mgt
SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Template_Type_Code , COUNT(*) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code , COUNT(*) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3	cre_Doc_Template_Mgt
SELECT Version_Number , Template_Type_Code FROM Templates ORDER BY Version_Number LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = "Data base"	cre_Doc_Template_Mgt
SELECT t3.Document_Name FROM Ref_Template_Types AS t1 INNER JOIN Templates AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code INNER JOIN Documents AS t3 ON t2.Template_ID = t3.Template_ID WHERE t1.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT T1.Document_Name FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code WHERE T3.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT rtt.Template_Type_Code , count(t.Template_ID) FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code , count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Code , Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Raamat"	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Raamat"	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID	cre_Doc_Template_Mgt
SELECT t2.Template_Type_Description FROM Documents AS t1 JOIN Templates AS t3 ON t1.Template_ID = t3.Template_ID JOIN Ref_Template_Types AS t2 ON t3.Template_Type_Code = t2.Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = "Esitlus"	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Details = "Presentation"	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = "Korea"	cre_Doc_Template_Mgt
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE "%Korea%"	cre_Doc_Template_Mgt
SELECT Paragraph_ID , Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')	cre_Doc_Template_Mgt
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')	cre_Doc_Template_Mgt
SELECT Paragraph_Text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.Document_ID = t2.Document_ID WHERE t2.Document_Name = "Klientide arvustused"	cre_Doc_Template_Mgt
SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Klientide arvustused'	cre_Doc_Template_Mgt
SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID	cre_Doc_Template_Mgt
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID	cre_Doc_Template_Mgt
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name	cre_Doc_Template_Mgt
SELECT d.Document_ID , d.Document_Name , count(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID , d.Document_Name	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2	cre_Doc_Template_Mgt
SELECT t1.Document_ID , t1.Document_Name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID GROUP BY t1.Document_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT t1.Document_ID , t1.Document_Name FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID GROUP BY t1.Document_ID ORDER BY count(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT document_id FROM Documents d WHERE (SELECT COUNT(*) FROM Paragraphs p WHERE p.document_id = d.document_id) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brasiilia' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Iirimaa'	cre_Doc_Template_Mgt
SELECT count(*) from teacher	course_teach
SELECT COUNT(*) FROM teacher	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT Age , Hometown FROM teacher	course_teach
SELECT Age , Hometown FROM teacher	course_teach
SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban District"	course_teach
SELECT T2.Name FROM teacher AS T2 EXCEPT SELECT T2.Name FROM teacher AS T2 JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Hometown = "Little Lever Urban District"	course_teach
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33	course_teach
SELECT Name FROM teacher WHERE Age = 32 OR Age = 33	course_teach
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1	course_teach
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1	course_teach
SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown	course_teach
SELECT count(*) , T1.Hometown FROM teacher AS T1 GROUP BY T1.Hometown	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count(*) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) >= 2	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) >= 2	course_teach
SELECT T2.Name , T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T2.Name , T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T2.Name, T1.Course FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID ORDER BY T2.Name	course_teach
SELECT T2.Name , T1.Course FROM course AS T1 JOIN teacher AS T2 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID AND T2.Teacher_ID = T3.Teacher_ID ORDER BY T2.Name	course_teach
SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Mathematics'	course_teach
SELECT T2.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math'	course_teach
SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name	course_teach
SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name	course_teach
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING count(*) >= 2	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(T1.Course_ID) >= 2	course_teach
SELECT Name FROM teacher EXCEPT SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT Name FROM teacher EXCEPT SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT count(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(T1.Age) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership <= 4	museum_visit
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC	museum_visit
SELECT Museum_ID , Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Staff) FROM museum WHERE CAST(Open_Year AS INT) < 2009	museum_visit
SELECT Open_Year , Num_of_Staff FROM museum WHERE Name = "Plaza Museum"	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010)	museum_visit
SELECT T1.ID , T1.Name , T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID HAVING count(*) > 1	museum_visit
SELECT T1.ID , T1.Name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID ORDER BY sum(T2.Total_spent) DESC LIMIT 1	museum_visit
SELECT t1.Museum_ID , t1.Name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t1.Museum_ID ORDER BY count(*) DESC LIMIT 1	museum_visit
SELECT Name FROM museum EXCEPT SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID	museum_visit
SELECT T2.Name , T2.Age FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID ORDER BY T1.Num_of_Ticket DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit	museum_visit
SELECT SUM(Total_spent) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1	museum_visit
SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.Open_Year < 2009 INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.Open_Year > 2011	museum_visit
SELECT COUNT(ID) FROM visitor EXCEPT SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE CAST(SUBSTRING(Open_Year, 1, 4) AS INTEGER) > 2010)	museum_visit
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008	museum_visit
SELECT COUNT(*) FROM players	wta_1
SELECT count(*) FROM players	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = "USA"	wta_1
SELECT AVG((winner_age + loser_age)/2) from matches	wta_1
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT MAX(loser_rank) FROM matches	wta_1
SELECT MIN(loser_rank) FROM matches	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10	wta_1
SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016	wta_1
SELECT T1.winner_name FROM matches AS T1 WHERE T1.year = 2013 INTERSECT SELECT T2.winner_name FROM matches AS T2 WHERE T2.year = 2016	wta_1
SELECT match_num FROM matches WHERE year = 2013 OR year = 2016	wta_1
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016	wta_1
SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'	wta_1
SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1	wta_1
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'Left-Handed' ORDER BY birth_date	wta_1
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)	wta_1
SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT T1.winner_name , T2.ranking_points FROM matches AS T1 JOIN rankings AS T2 ON T1.winner_id = T2.player_id GROUP BY T1.winner_id ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = "Australian Open" ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1	wta_1
SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1	wta_1
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1	wta_1
SELECT AVG(T2.ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name , AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id	wta_1
SELECT SUM(T2.ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name , sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id	wta_1
SELECT COUNT(*) , country_code FROM players GROUP BY country_code	wta_1
SELECT country_code , COUNT(*) FROM players GROUP BY country_code	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50	wta_1
SELECT winner_ioc FROM matches GROUP BY winner_ioc HAVING count(*) > 50	wta_1
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date	wta_1
SELECT SUM(tours) , ranking_date FROM rankings GROUP BY ranking_date	wta_1
SELECT year, COUNT(*) AS matches_per_year FROM matches GROUP BY year	wta_1
SELECT year , count(*) FROM matches GROUP BY year	wta_1
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3	wta_1
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3	wta_1
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = "WTA Championships" AND winner_hand = "L"	wta_1
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_level = 'G'	wta_1
SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1	wta_1
SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1	wta_1
SELECT hand, COUNT(*) FROM players GROUP BY hand	wta_1
SELECT hand, COUNT(*) FROM players GROUP BY hand	wta_1
SELECT count(*) FROM ship WHERE disposition_of_ship = "Captured"	battle_death
SELECT Name, Tonnage FROM ship ORDER BY Name DESC	battle_death
SELECT name , date , result FROM battle	battle_death
SELECT max(killed), min(killed) from death	battle_death
SELECT AVG(injured) FROM death	battle_death
SELECT killed , injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'	battle_death
SELECT name , result FROM battle WHERE bulgarian_commander != 'Boril'	battle_death
SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'	battle_death
SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10	battle_death
SELECT T1.id , T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id ORDER BY T2.injured DESC LIMIT 1	battle_death
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' INTERSECT SELECT name FROM battle WHERE latin_commander = 'Baldwin I'	battle_death
SELECT COUNT(DISTINCT result) FROM battle	battle_death
SELECT COUNT(*) FROM battle EXCEPT SELECT lost_in_battle FROM ship WHERE tonnage = '225'	battle_death
SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'	battle_death
SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location != "English Channel"	battle_death
SELECT note FROM death WHERE note LIKE "%East%"	battle_death
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT line_1 , line_2 FROM Addresses	student_transcripts_tracking
SELECT COUNT(*) FROM Courses	student_transcripts_tracking
SELECT count(*) FROM Courses	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'Mathematics'	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name LIKE '%Mathematics%'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea"	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = "Port Chelsea"	student_transcripts_tracking
SELECT T1.department_id , T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_name , T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')	student_transcripts_tracking
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Engineering')	student_transcripts_tracking
SELECT section_name , section_description FROM Sections	student_transcripts_tracking
SELECT section_name , section_description FROM Sections	student_transcripts_tracking
SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2	student_transcripts_tracking
SELECT T1.course_id , T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) < 2	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT T1.semester_id , T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT semester_id , semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1)	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE "%Computer%"	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name LIKE "%Computer%"	student_transcripts_tracking
SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.semester_id , T2.student_id HAVING count(*) >= 2	student_transcripts_tracking
SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.semester_id , T2.student_id HAVING count(DISTINCT T2.degree_program_id) = 2	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1)	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%'))	student_transcripts_tracking
SELECT T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_id, T2.degree_summary_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id JOIN Student_Enrolment AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , COUNT(*) , T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id , COUNT(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT semester_name FROM Semesters EXCEPT SELECT T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id	student_transcripts_tracking
SELECT semester_name FROM Semesters EXCEPT SELECT T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id	student_transcripts_tracking
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = "North Carolina" EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id	student_transcripts_tracking
SELECT last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id	student_transcripts_tracking
SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2	student_transcripts_tracking
SELECT t1.transcript_date , t1.transcript_id FROM Transcripts AS t1 JOIN Transcript_Contents AS t2 ON t1.transcript_id = t2.transcript_id GROUP BY t1.transcript_id HAVING count(*) >= 2	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward"	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = "Timmothy" AND last_name = "Ward"	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_left ASC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 WHERE T1.current_address_id != T1.permanent_address_id	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id != T3.address_id	student_transcripts_tracking
SELECT current_address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T1.current_address_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT AVG(strftime('%J', transcript_date)) from Transcripts	student_transcripts_tracking
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT MIN(transcript_date), other_details FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(transcript_id) AS count, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1	student_transcripts_tracking
SELECT T1.student_course_id, COUNT(*) AS times_in_transcripts FROM Student_Enrolment_Courses AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY times_in_transcripts DESC LIMIT 1;	student_transcripts_tracking
SELECT transcript_id, transcript_date FROM Transcripts ORDER BY transcript_id ASC LIMIT 1	student_transcripts_tracking
SELECT transcript_id , transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY count(*) LIMIT 1)	student_transcripts_tracking
SELECT semester_name FROM Semesters AS sem JOIN Student_Enrolment AS se ON sem.semester_id = se.semester_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Master%' INTERSECT SELECT semester_name FROM Semesters AS sem JOIN Student_Enrolment AS se ON sem.semester_id = se.semester_id JOIN Degree_Programs AS dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'	student_transcripts_tracking
SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING count(DISTINCT degree_program_id) > 1	student_transcripts_tracking
SELECT COUNT(DISTINCT current_address_id) FROM Students	student_transcripts_tracking
SELECT DISTINCT current_address_id FROM Students	student_transcripts_tracking
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, middle_name DESC, first_name DESC	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY last_name DESC	student_transcripts_tracking
SELECT section_name, section_description FROM Sections WHERE section_id = 'h'	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = "h"	student_transcripts_tracking
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"	tvshow
SELECT Title , Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" UNION SELECT Title FROM Cartoon WHERE Directed_by = "Brandon Vietti"	tvshow
SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1	tvshow
SELECT Country, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Country ORDER BY ChannelCount DESC LIMIT 1	tvshow
SELECT DISTINCT series_name , Content FROM TV_Channel	tvshow
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT count(*) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT count(*) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1	tvshow
SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle"	tvshow
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT MIN(Share), MAX(Share) FROM TV_series	tvshow
SELECT MAX(Share), MIN(Share) FROM TV_series	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT T2.Air_Date FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"	tvshow
SELECT T2.Weekly_Rank FROM TV_series AS T2 JOIN TV_Channel AS T1 ON T2.Channel = T1.id WHERE T2.Episode = "Igavene armastus"	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "The Love of Life"	tvshow
SELECT Episode FROM TV_series WHERE Channel = ( SELECT id FROM TV_Channel WHERE series_name = "Sky Radio" )	tvshow
SELECT Episode FROM TV_series WHERE Channel = "Sky Radio"	tvshow
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Directed_by , COUNT(*) FROM Cartoon GROUP BY Directed_by	tvshow
SELECT Production_code , Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT Production_code , Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT Package_Option , series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'	tvshow
SELECT Package_Option , series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = "Todd Casey"	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = "Todd Casey"	tvshow
SELECT Country FROM TV_Channel EXCEPT SELECT T3.Country FROM Cartoon AS T1 JOIN TV_Channel AS T3 ON T1.Channel = T3.id WHERE T1.Written_by = 'Todd Casey'	tvshow
SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones" INTERSECT SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Michael Chang"	tvshow
SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones and Michael Chang"	tvshow
SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT Pixel_aspect_ratio_PAR , Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*) > 2	tvshow
SELECT Channel FROM TV_series GROUP BY Channel HAVING count(*) > 2	tvshow
SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = "Ben Jones"	tvshow
SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones"	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = "Ben Jones"	tvshow
SELECT count(*) FROM poker_player	poker_player
SELECT count(*) FROM poker_player	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player	poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made	poker_player
SELECT Birth_Date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1	poker_player
SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)	poker_player
SELECT Money_Rank FROM poker_player ORDER BY poker_player.People_ID IN ( SELECT People_ID FROM people ORDER BY Height DESC ) LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Height DESC, Money_Rank ASC LIMIT 1	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC	poker_player
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC	poker_player
SELECT T1.Nationality , count(*) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Nationality	poker_player
SELECT COUNT(*) , Nationality FROM people GROUP BY Nationality	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people EXCEPT SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID	poker_player
SELECT Name FROM people EXCEPT SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people	poker_player
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT vote_id , phone_number , state FROM VOTES	voter_1
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE	voter_1
SELECT MAX(created) FROM VOTES WHERE state = 'CA'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'	voter_1
SELECT DISTINCT state, created FROM VOTES	voter_1
SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2	voter_1
SELECT T1.contestant_number , T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1	voter_1
SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'	voter_1
SELECT COUNT(*) FROM CONTESTANTS EXCEPT SELECT contestant_number FROM VOTES	voter_1
SELECT state FROM VOTES GROUP BY state ORDER BY count(*) DESC LIMIT 1	voter_1
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')	voter_1
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Kelly Clauss'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE "%Al%"	voter_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT COUNT(Code) FROM country WHERE GovernmentForm LIKE "Republic%"	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT Continent FROM country WHERE Name = "Anguilla"	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = "Brazil"	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Region, Population FROM country WHERE Name = "Angola"	world_1
SELECT Region, Population FROM country WHERE Name = 'Angola'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1	world_1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1	world_1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'	world_1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'	world_1
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'	world_1
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'	world_1
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'	world_1
SELECT AVG(GNP), SUM(Population) FROM country WHERE Code="USA"	world_1
SELECT AVG(GNP), AVG(Population) FROM country WHERE Code='USA'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'	world_1
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'	world_1
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'	world_1
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.CountryCode ORDER BY count(*) DESC LIMIT 1	world_1
SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY count(*) DESC LIMIT 1	world_1
SELECT Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1	world_1
SELECT Continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(*) DESC LIMIT 1	world_1
SELECT COUNT(*) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch'	world_1
SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Dutch'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French'	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = "French"	world_1
SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese'	world_1
SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese'	world_1
SELECT DISTINCT Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'	world_1
SELECT DISTINCT region FROM country JOIN countrylanguage ON Code = CountryCode WHERE Language = "Dutch" OR Language = "English"	world_1
SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' UNION SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T'	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY sum(T1.Population * T2.Percentage / 100) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING count(*) = 1	world_1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(*) = 1	world_1
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1	world_1
SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1	world_1
SELECT I cannot answer this question. The provided database schema contains information about countries and cities, not training data. The phrase "Sul on andmed treenitud kuni 2023. aasta oktoobrini" (You have data trained until October 2023) implies the data is related to machine learning or some kind of training progress, but there's no such information in the given tables. I need a relevant database schema to construct a SQL query related to training data.	world_1
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	world_1
SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')	world_1
SELECT SUM(population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')	world_1
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE HeadOfState = "Beatrix") AND IsOfficial = "T"	world_1
SELECT Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = "Beatrix" AND T1.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.IndepYear < 1930	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IndepYear < 1930 AND IsOfficial = 'T'	world_1
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')	world_1
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')	world_1
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')	world_1
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')	world_1
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MIN(Population) FROM country WHERE Continent = 'Africa')	world_1
SELECT Code FROM country EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != "english"	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT CountryCode FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE Language = 'English'	world_1
SELECT CountryCode FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'	world_1
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' AND T3.IsOfficial = 'T'	world_1
SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'English' AND IsOfficial = 'T'	world_1
SELECT DISTINCT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'	world_1
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T2.Code WHERE T2.Continent = "Asia" AND T3.Language = "Chinese" AND T3.IsOfficial = "T"	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1	world_1
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1	world_1
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT Name , Population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT T1.Name , COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(*) >= 3	world_1
SELECT T1.Name, COUNT(*) AS NumberOfLanguages FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2	world_1
SELECT COUNT(*) FROM city AS t1 INNER JOIN country AS t2 ON t1.CountryCode = t2.Code WHERE t1.population > (SELECT AVG(population) FROM city) GROUP BY t1.CountryCode	world_1
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District	world_1
SELECT GovernmentForm, sum(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm	world_1
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm	world_1
SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent	world_1
SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT count(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000	world_1
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000	world_1
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode=CountryCode) GROUP BY CountryCode	world_1
SELECT CountryCode, Language FROM countrylanguage WHERE Percentage IN (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)	world_1
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')	world_1
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50	world_1
SELECT COUNT(*) FROM conductor	orchestra
SELECT COUNT(*) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Age ASC	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT Name FROM conductor WHERE Nationality != "USA"	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT max("Share") , min("Share") FROM performance WHERE Type != "Lõppvoorus"	orchestra
SELECT MAX(Attendance), MIN(Attendance) FROM show AS t1 JOIN performance AS t2 ON t1.Performance_ID = t2.Performance_ID WHERE t2.Type != "Live final"	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING count(*) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1	orchestra
SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded ASC	orchestra
SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Major_Record_Format ORDER BY count(*)	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1	orchestra
SELECT Orchestra FROM orchestra EXCEPT SELECT T2.Orchestra FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID	orchestra
SELECT Orchestra FROM orchestra EXCEPT SELECT T1.Orchestra FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003	orchestra
SELECT count(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'	orchestra
SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING count(*) > 1	orchestra
SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING count(*) > 1	orchestra
SELECT COUNT(*) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name , grade FROM Highschooler	network_1
SELECT grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name = "Kyle"	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10	network_1
SELECT grade , count(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4	network_1
SELECT ID , COUNT(*) FROM Friend GROUP BY ID	network_1
SELECT T1.name , COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID	network_1
SELECT T1.name , COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT name, COUNT(*) AS friend_count FROM Highschooler JOIN Friend ON ID = student_id GROUP BY ID	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id ORDER BY count(*) DESC LIMIT 1)	network_1
SELECT name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 3	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 3)	network_1
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T3 ON T1.ID = T3.student_id JOIN Highschooler AS T2 ON T3.friend_id = T2.ID WHERE T1.name = 'Kyle'	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	network_1
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	network_1
SELECT name FROM Highschooler EXCEPT SELECT name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id	network_1
SELECT name FROM Highschooler EXCEPT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id	network_1
SELECT ID FROM Friend INTERSECT SELECT liked_id FROM Likes	network_1
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes	network_1
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) INTERSECT SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes)	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id	network_1
SELECT COUNT(*) , student_id FROM Likes GROUP BY student_id	network_1
SELECT liked_id, COUNT(*) AS meeldimiste_arv FROM Likes GROUP BY liked_id	network_1
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id	network_1
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY count(*) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id ORDER BY count(*) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID HAVING count(*) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T2.liked_id HAVING count(*) >= 2	network_1
SELECT name FROM Highschooler WHERE grade > 5 INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 2	network_1
SELECT name FROM Highschooler WHERE grade > 5 INTERSECT SELECT name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2	network_1
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Likes AS L, Highschooler AS H WHERE L.liked_id = H.ID AND H.name = 'Kyle'	network_1
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)	network_1
SELECT AVG(T1.grade) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id	network_1
SELECT name, grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) ORDER BY grade LIMIT 1	network_1
SELECT grade FROM Highschooler EXCEPT SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id ORDER BY grade ASC LIMIT 1	network_1
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT AVG(T2.age) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT AVG(CAST(REPLACE(T2.age, ' years', '') AS INTEGER)) FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = "Indiana" UNION SELECT T2.professional_id, T2.last_name, T2.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2	dog_kennels
SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T2.professional_id , T2.last_name , T2.cell_number FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2	dog_kennels
SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments WHERE cost_of_treatment > 1000)	dog_kennels
SELECT T1.name FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000	dog_kennels
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs	dog_kennels
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs	dog_kennels
SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT professional_id, role_code, email_address FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id	dog_kennels
SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T2.professional_id , T2.role_code , T2.email_address FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT owner_id , first_name , last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1	dog_kennels
SELECT owner_id, first_name, last_name FROM Owners GROUP BY owner_id ORDER BY count(owner_id) DESC LIMIT 1	dog_kennels
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) >= 2)	dog_kennels
SELECT professional_id , role_code , first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) >= 2)	dog_kennels
SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) DESC LIMIT 1)	dog_kennels
SELECT t1.breed_name FROM Breeds AS t1 JOIN Dogs AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_name ORDER BY COUNT(*) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT owner_id, last_name from Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id from Treatments ORDER BY cost_of_treatment DESC LIMIT 1))	dog_kennels
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)	dog_kennels
SELECT treatment_type_description FROM Treatment_Types AS t1 INNER JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t2.treatment_type_code ORDER BY sum(t2.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE dog_id IN (SELECT dog_id from Treatments ORDER BY cost_of_treatment DESC)) LIMIT 1	dog_kennels
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)	dog_kennels
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(DISTINCT treatment_type_code) >= 2)	dog_kennels
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))	dog_kennels
SELECT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	dog_kennels
SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code	dog_kennels
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code	dog_kennels
SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT o.first_name, d.name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id	dog_kennels
SELECT T1.name , T3.date_of_treatment FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id WHERE T2.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )	dog_kennels
SELECT T1.name , T3.date_of_treatment FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T3.dog_id = T1.dog_id WHERE T2.breed_code IN ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )	dog_kennels
SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'	dog_kennels
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'	dog_kennels
SELECT d.date_arrived, d.date_departed FROM Dogs AS d INNER JOIN Treatments AS t ON d.dog_id = t.dog_id	dog_kennels
SELECT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)	dog_kennels
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1	dog_kennels
SELECT email_address FROM Professionals WHERE state = "Hawaii" OR state = "Wisconsin"	dog_kennels
SELECT email_address FROM Professionals WHERE state = "Hawaii" OR state = "Wisconsin"	dog_kennels
SELECT date_arrived, date_departed FROM Dogs	dog_kennels
SELECT date_arrived , date_departed FROM Dogs	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT count(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	dog_kennels
SELECT role_code , street , city , state FROM Professionals WHERE city LIKE "%West%"	dog_kennels
SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE "%North%"	dog_kennels
SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)	dog_kennels
SELECT count(*) FROM Dogs EXCEPT SELECT dog_id FROM Treatments	dog_kennels
SELECT COUNT(owner_id) FROM Owners EXCEPT SELECT owner_id FROM Dogs WHERE date_adopted IS NULL	dog_kennels
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)	dog_kennels
SELECT COUNT(professional_id) FROM Professionals EXCEPT SELECT professional_id FROM Treatments	dog_kennels
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT name , age , weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT AVG(CAST(REPLACE(age, ' years', '') AS INTEGER)) from Dogs	dog_kennels
SELECT MAX(age) FROM Dogs	dog_kennels
SELECT MAX(age) FROM Dogs	dog_kennels
SELECT charge_type , charge_amount FROM Charges	dog_kennels
SELECT charge_type , charge_amount FROM Charges	dog_kennels
SELECT MAX(charge_amount) FROM Charges	dog_kennels
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT email_address , cell_number , home_phone FROM Professionals	dog_kennels
SELECT breed_name, size_description FROM Breeds CROSS JOIN Sizes	dog_kennels
SELECT DISTINCT breed_code, size_code FROM Dogs	dog_kennels
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;	dog_kennels
SELECT T1.first_name , T3.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT count(*) FROM singer	singer
SELECT COUNT(*) FROM singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Birth_Year , Citizenship FROM singer	singer
SELECT Birth_Year , Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship != "France"	singer
SELECT Name FROM singer EXCEPT SELECT Name FROM singer WHERE Citizenship = 'France'	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship , count(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1	singer
SELECT Citizenship , MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship	singer
SELECT MAX(Net_Worth_Millions) , Citizenship FROM singer GROUP BY Citizenship	singer
SELECT T1.Title , T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING count(*) > 1	singer
SELECT T1.Name , SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	singer
SELECT s.Singer_ID , SUM(so.Sales) FROM singer AS s JOIN song AS so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)	singer
SELECT Name FROM singer EXCEPT SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955	singer
SELECT count(*) FROM Other_Available_Features	real_estate_properties
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon'	real_estate_properties
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'DET'	real_estate_properties
SELECT property_name FROM Properties WHERE property_type_code IN ('HSE','APT') AND room_count > 1	real_estate_properties
